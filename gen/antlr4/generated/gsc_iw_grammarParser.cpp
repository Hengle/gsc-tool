
// Generated from gsc_iw_grammar.g4 by ANTLR 4.13.2


#include "gsc_iw_grammarListener.h"

#include "gsc_iw_grammarParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct Gsc_iw_grammarParserStaticData final {
  Gsc_iw_grammarParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Gsc_iw_grammarParserStaticData(const Gsc_iw_grammarParserStaticData&) = delete;
  Gsc_iw_grammarParserStaticData(Gsc_iw_grammarParserStaticData&&) = delete;
  Gsc_iw_grammarParserStaticData& operator=(const Gsc_iw_grammarParserStaticData&) = delete;
  Gsc_iw_grammarParserStaticData& operator=(Gsc_iw_grammarParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gsc_iw_grammarParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<Gsc_iw_grammarParserStaticData> gsc_iw_grammarParserStaticData = nullptr;

void gsc_iw_grammarParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gsc_iw_grammarParserStaticData != nullptr) {
    return;
  }
#else
  assert(gsc_iw_grammarParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Gsc_iw_grammarParserStaticData>(
    std::vector<std::string>{
      "program", "include", "inline", "declaration", "decl_usingtree", "decl_constant", 
      "decl_function", "stmt", "stmt_list", "stmt_or_dev_list", "stmt_dev", 
      "stmt_comp", "stmt_expr", "stmt_endon", "stmt_notify", "stmt_wait", 
      "stmt_waittill", "stmt_waittillmatch", "stmt_waittillframeend", "stmt_waitframe", 
      "stmt_if", "stmt_while", "stmt_dowhile", "stmt_for", "stmt_foreach", 
      "stmt_switch", "stmt_case", "stmt_default", "stmt_break", "stmt_continue", 
      "stmt_return", "stmt_breakpoint", "stmt_prof_begin", "stmt_prof_end", 
      "stmt_assert", "stmt_assertex", "stmt_assertmsg", "expr_assign", "expr", 
      "expr_ternary", "expr_or", "expr_and", "expr_bw_or", "expr_bw_xor", 
      "expr_bw_and", "expr_equality", "expr_relational", "expr_shift", "expr_additive", 
      "expr_multiplicative", "expr_unary", "expr_complement", "expr_negate", 
      "expr_animation", "expr_primary", "expr_call", "expr_method", "expr_function", 
      "expr_pointer", "expr_isdefined", "expr_istrue", "expr_reference", 
      "expr_parameters", "expr_arguments", "expr_tuple", "expr_add_array", 
      "expr_paren", "expr_lvalue", "expr_lvalue_array", "expr_lvalue_field", 
      "expr_object", "expr_object_subexpr", "expr_object_subexpr_no_call", 
      "expr_array_or_field_or_call", "expr_array_or_field", "expr_array", 
      "expr_field", "expr_size", "expr_thisthread", "expr_empty_array", 
      "expr_undefined", "expr_game", "expr_self", "expr_anim", "expr_level", 
      "expr_animtree", "expr_vector", "expr_path", "expr_identifier_field", 
      "expr_identifier", "expr_istring", "expr_string", "expr_float", "expr_integer", 
      "expr_false", "expr_true"
    },
    std::vector<std::string>{
      "", "'#'", "'/#'", "'#/'", "'#inline'", "'#include'", "'#using_animtree'", 
      "'#animtree'", "'endon'", "'notify'", "'wait'", "'waittill'", "'waittillmatch'", 
      "'waittillframeend'", "'waitframe'", "'if'", "'else'", "'do'", "'while'", 
      "'for'", "'foreach'", "'in'", "'switch'", "'case'", "'default'", "'break'", 
      "'continue'", "'return'", "'breakpoint'", "'prof_begin'", "'prof_end'", 
      "'assert'", "'assertex'", "'assertmsg'", "'thread'", "'childthread'", 
      "'thisthread'", "'call'", "'true'", "'false'", "'undefined'", "'size'", 
      "'game'", "'self'", "'anim'", "'level'", "'isdefined'", "'istrue'", 
      "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'.'", "'..'", "'...'", 
      "'::'", "':'", "';'", "'\\u003F'", "'++'", "'--'", "'<<'", "'>>'", 
      "'||'", "'&&'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", "'!'", 
      "'~'", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'>>='", "'<<='", 
      "'|='", "'^='", "'&='", "'|'", "'^'", "'&'", "'+'", "'-'", "'*'", 
      "'/'", "'%'"
    },
    std::vector<std::string>{
      "", "HASH", "DEVBEGIN", "DEVEND", "INLINE", "INCLUDE", "USINGTREE", 
      "ANIMTREE", "ENDON", "NOTIFY", "WAIT", "WAITTILL", "WAITTILLMATCH", 
      "WAITTILLFRAMEEND", "WAITFRAME", "IF", "ELSE", "DO", "WHILE", "FOR", 
      "FOREACH", "IN", "SWITCH", "CASE", "DEFAULT", "BREAK", "CONTINUE", 
      "RETURN", "BREAKPOINT", "PROFBEGIN", "PROFEND", "ASSERT", "ASSERTEX", 
      "ASSERTMSG", "THREAD", "CHILDTHREAD", "THISTHREAD", "CALL", "TRUE", 
      "FALSE", "UNDEFINED", "SIZE", "GAME", "SELF", "ANIM", "LEVEL", "ISDEFINED", 
      "ISTRUE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
      "COMMA", "DOT", "DOUBLEDOT", "ELLIPSIS", "DOUBLECOLON", "COLON", "SEMICOLON", 
      "QMARK", "INCREMENT", "DECREMENT", "LSHIFT", "RSHIFT", "OR", "AND", 
      "EQUALITY", "INEQUALITY", "LESS_EQUAL", "GREATER_EQUAL", "LESS", "GREATER", 
      "NOT", "COMPLEMENT", "ASSIGN", "AMUL", "ADIV", "AMOD", "AADD", "ASUB", 
      "ARSH", "ALSH", "ABWOR", "ABWXOR", "ABWAND", "BW_OR", "BW_XOR", "BW_AND", 
      "ADD", "SUB", "MUL", "DIV", "MOD", "FLOAT", "INTEGER", "STRING", "ISTRING", 
      "HSTRING", "IDENTIFIER", "PATH", "WHITESPACE", "LINE_COMMENT", "BLOCK_COMMENT", 
      "GSCDOC_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,105,927,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
  	84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
  	91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,1,0,1,0,1,0,1,0,5,0,197,8,
  	0,10,0,12,0,200,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,
  	3,1,3,1,3,3,3,217,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
  	1,6,1,6,3,6,233,8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
  	7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,
  	264,8,7,1,8,4,8,267,8,8,11,8,12,8,268,1,9,1,9,4,9,273,8,9,11,9,12,9,274,
  	1,10,1,10,3,10,279,8,10,1,10,1,10,1,11,1,11,3,11,285,8,11,1,11,1,11,1,
  	12,1,12,1,12,3,12,292,8,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
  	13,1,14,1,14,1,14,1,14,1,14,1,14,3,14,309,8,14,1,14,1,14,1,14,1,15,1,
  	15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,324,8,16,1,16,1,16,1,
  	16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,335,8,17,1,17,1,17,1,17,1,18,1,
  	18,1,18,3,18,343,8,18,1,18,1,18,1,19,1,19,1,19,3,19,350,8,19,1,19,1,19,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,361,8,20,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,3,23,
  	380,8,23,1,23,1,23,3,23,384,8,23,1,23,1,23,3,23,388,8,23,1,23,1,23,1,
  	23,1,24,1,24,1,24,1,24,1,24,3,24,398,8,24,1,24,1,24,1,24,1,24,1,24,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,3,26,414,8,26,1,26,1,26,1,
  	27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,3,30,429,8,30,1,
  	30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,3,32,439,8,32,1,32,1,32,1,32,1,
  	33,1,33,1,33,3,33,447,8,33,1,33,1,33,1,33,1,34,1,34,1,34,3,34,455,8,34,
  	1,34,1,34,1,34,1,35,1,35,1,35,3,35,463,8,35,1,35,1,35,1,35,1,36,1,36,
  	1,36,3,36,471,8,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,494,8,37,
  	1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,504,8,39,1,40,1,40,1,40,
  	5,40,509,8,40,10,40,12,40,512,9,40,1,41,1,41,1,41,5,41,517,8,41,10,41,
  	12,41,520,9,41,1,42,1,42,1,42,5,42,525,8,42,10,42,12,42,528,9,42,1,43,
  	1,43,1,43,5,43,533,8,43,10,43,12,43,536,9,43,1,44,1,44,1,44,5,44,541,
  	8,44,10,44,12,44,544,9,44,1,45,1,45,1,45,5,45,549,8,45,10,45,12,45,552,
  	9,45,1,46,1,46,1,46,5,46,557,8,46,10,46,12,46,560,9,46,1,47,1,47,1,47,
  	5,47,565,8,47,10,47,12,47,568,9,47,1,48,1,48,1,48,5,48,573,8,48,10,48,
  	12,48,576,9,48,1,49,1,49,1,49,5,49,581,8,49,10,49,12,49,584,9,49,1,50,
  	1,50,1,50,1,50,3,50,590,8,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
  	1,52,3,52,601,8,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,3,54,630,8,54,1,55,1,55,3,55,634,8,55,1,56,1,56,1,56,3,
  	56,639,8,56,1,57,3,57,642,8,57,1,57,1,57,1,57,3,57,647,8,57,1,57,1,57,
  	1,57,3,57,652,8,57,1,57,1,57,1,58,3,58,657,8,58,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,3,58,666,8,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,
  	60,1,60,1,60,1,60,1,61,3,61,681,8,61,1,61,1,61,1,61,1,62,1,62,1,62,5,
  	62,689,8,62,10,62,12,62,692,9,62,1,63,1,63,1,63,5,63,697,8,63,10,63,12,
  	63,700,9,63,1,64,1,64,1,64,1,64,5,64,706,8,64,10,64,12,64,709,9,64,1,
  	64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,3,67,724,
  	8,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,
  	1,70,1,70,1,70,3,70,742,8,70,1,71,1,71,5,71,746,8,71,10,71,12,71,749,
  	9,71,1,71,1,71,5,71,753,8,71,10,71,12,71,756,9,71,1,71,1,71,4,71,760,
  	8,71,11,71,12,71,761,1,71,5,71,765,8,71,10,71,12,71,768,9,71,1,71,1,71,
  	4,71,772,8,71,11,71,12,71,773,1,71,1,71,4,71,778,8,71,11,71,12,71,779,
  	1,71,5,71,783,8,71,10,71,12,71,786,9,71,1,71,1,71,4,71,790,8,71,11,71,
  	12,71,791,1,71,5,71,795,8,71,10,71,12,71,798,9,71,3,71,800,8,71,1,72,
  	1,72,5,72,804,8,72,10,72,12,72,807,9,72,1,72,1,72,4,72,811,8,72,11,72,
  	12,72,812,1,72,5,72,816,8,72,10,72,12,72,819,9,72,1,72,1,72,4,72,823,
  	8,72,11,72,12,72,824,1,72,1,72,4,72,829,8,72,11,72,12,72,830,1,72,5,72,
  	834,8,72,10,72,12,72,837,9,72,1,72,1,72,4,72,841,8,72,11,72,12,72,842,
  	1,72,5,72,846,8,72,10,72,12,72,849,9,72,3,72,851,8,72,1,73,1,73,1,73,
  	1,73,1,73,1,73,1,73,3,73,860,8,73,1,74,1,74,1,74,1,74,1,74,1,74,3,74,
  	868,8,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,3,77,879,8,77,1,
  	77,1,77,1,77,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,
  	83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
  	87,1,87,1,88,1,88,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,
  	94,1,94,1,95,1,95,1,95,0,0,96,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
  	30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
  	76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
  	118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
  	154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
  	190,0,11,1,0,76,86,1,0,68,69,1,0,70,73,1,0,64,65,1,0,90,91,1,0,92,94,
  	1,0,34,35,2,0,34,35,37,37,1,0,100,101,2,0,10,10,100,100,2,0,41,41,100,
  	100,984,0,198,1,0,0,0,2,203,1,0,0,0,4,207,1,0,0,0,6,216,1,0,0,0,8,218,
  	1,0,0,0,10,224,1,0,0,0,12,229,1,0,0,0,14,263,1,0,0,0,16,266,1,0,0,0,18,
  	272,1,0,0,0,20,276,1,0,0,0,22,282,1,0,0,0,24,291,1,0,0,0,26,295,1,0,0,
  	0,28,302,1,0,0,0,30,313,1,0,0,0,32,317,1,0,0,0,34,328,1,0,0,0,36,339,
  	1,0,0,0,38,346,1,0,0,0,40,353,1,0,0,0,42,362,1,0,0,0,44,368,1,0,0,0,46,
  	376,1,0,0,0,48,392,1,0,0,0,50,404,1,0,0,0,52,410,1,0,0,0,54,417,1,0,0,
  	0,56,420,1,0,0,0,58,423,1,0,0,0,60,426,1,0,0,0,62,432,1,0,0,0,64,435,
  	1,0,0,0,66,443,1,0,0,0,68,451,1,0,0,0,70,459,1,0,0,0,72,467,1,0,0,0,74,
  	493,1,0,0,0,76,495,1,0,0,0,78,497,1,0,0,0,80,505,1,0,0,0,82,513,1,0,0,
  	0,84,521,1,0,0,0,86,529,1,0,0,0,88,537,1,0,0,0,90,545,1,0,0,0,92,553,
  	1,0,0,0,94,561,1,0,0,0,96,569,1,0,0,0,98,577,1,0,0,0,100,589,1,0,0,0,
  	102,591,1,0,0,0,104,594,1,0,0,0,106,602,1,0,0,0,108,629,1,0,0,0,110,633,
  	1,0,0,0,112,635,1,0,0,0,114,641,1,0,0,0,116,656,1,0,0,0,118,669,1,0,0,
  	0,120,674,1,0,0,0,122,680,1,0,0,0,124,685,1,0,0,0,126,693,1,0,0,0,128,
  	701,1,0,0,0,130,712,1,0,0,0,132,716,1,0,0,0,134,723,1,0,0,0,136,725,1,
  	0,0,0,138,730,1,0,0,0,140,741,1,0,0,0,142,799,1,0,0,0,144,850,1,0,0,0,
  	146,859,1,0,0,0,148,867,1,0,0,0,150,869,1,0,0,0,152,873,1,0,0,0,154,878,
  	1,0,0,0,156,883,1,0,0,0,158,885,1,0,0,0,160,888,1,0,0,0,162,890,1,0,0,
  	0,164,892,1,0,0,0,166,894,1,0,0,0,168,896,1,0,0,0,170,898,1,0,0,0,172,
  	900,1,0,0,0,174,908,1,0,0,0,176,910,1,0,0,0,178,912,1,0,0,0,180,914,1,
  	0,0,0,182,916,1,0,0,0,184,918,1,0,0,0,186,920,1,0,0,0,188,922,1,0,0,0,
  	190,924,1,0,0,0,192,197,3,2,1,0,193,197,3,4,2,0,194,197,3,6,3,0,195,197,
  	5,60,0,0,196,192,1,0,0,0,196,193,1,0,0,0,196,194,1,0,0,0,196,195,1,0,
  	0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,
  	198,1,0,0,0,201,202,5,0,0,1,202,1,1,0,0,0,203,204,5,5,0,0,204,205,3,174,
  	87,0,205,206,5,60,0,0,206,3,1,0,0,0,207,208,5,4,0,0,208,209,3,174,87,
  	0,209,210,5,60,0,0,210,5,1,0,0,0,211,217,5,2,0,0,212,217,5,3,0,0,213,
  	217,3,8,4,0,214,217,3,10,5,0,215,217,3,12,6,0,216,211,1,0,0,0,216,212,
  	1,0,0,0,216,213,1,0,0,0,216,214,1,0,0,0,216,215,1,0,0,0,217,7,1,0,0,0,
  	218,219,5,6,0,0,219,220,5,48,0,0,220,221,3,182,91,0,221,222,5,49,0,0,
  	222,223,5,60,0,0,223,9,1,0,0,0,224,225,3,178,89,0,225,226,5,76,0,0,226,
  	227,3,76,38,0,227,228,5,60,0,0,228,11,1,0,0,0,229,230,3,178,89,0,230,
  	232,5,48,0,0,231,233,3,124,62,0,232,231,1,0,0,0,232,233,1,0,0,0,233,234,
  	1,0,0,0,234,235,5,49,0,0,235,236,3,22,11,0,236,13,1,0,0,0,237,264,3,22,
  	11,0,238,264,3,24,12,0,239,264,3,26,13,0,240,264,3,28,14,0,241,264,3,
  	30,15,0,242,264,3,32,16,0,243,264,3,34,17,0,244,264,3,36,18,0,245,264,
  	3,38,19,0,246,264,3,40,20,0,247,264,3,42,21,0,248,264,3,44,22,0,249,264,
  	3,46,23,0,250,264,3,48,24,0,251,264,3,50,25,0,252,264,3,52,26,0,253,264,
  	3,54,27,0,254,264,3,56,28,0,255,264,3,58,29,0,256,264,3,60,30,0,257,264,
  	3,62,31,0,258,264,3,64,32,0,259,264,3,66,33,0,260,264,3,68,34,0,261,264,
  	3,70,35,0,262,264,3,72,36,0,263,237,1,0,0,0,263,238,1,0,0,0,263,239,1,
  	0,0,0,263,240,1,0,0,0,263,241,1,0,0,0,263,242,1,0,0,0,263,243,1,0,0,0,
  	263,244,1,0,0,0,263,245,1,0,0,0,263,246,1,0,0,0,263,247,1,0,0,0,263,248,
  	1,0,0,0,263,249,1,0,0,0,263,250,1,0,0,0,263,251,1,0,0,0,263,252,1,0,0,
  	0,263,253,1,0,0,0,263,254,1,0,0,0,263,255,1,0,0,0,263,256,1,0,0,0,263,
  	257,1,0,0,0,263,258,1,0,0,0,263,259,1,0,0,0,263,260,1,0,0,0,263,261,1,
  	0,0,0,263,262,1,0,0,0,264,15,1,0,0,0,265,267,3,14,7,0,266,265,1,0,0,0,
  	267,268,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,17,1,0,0,0,270,273,
  	3,14,7,0,271,273,3,20,10,0,272,270,1,0,0,0,272,271,1,0,0,0,273,274,1,
  	0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,19,1,0,0,0,276,278,5,2,0,0,
  	277,279,3,16,8,0,278,277,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,
  	281,5,3,0,0,281,21,1,0,0,0,282,284,5,50,0,0,283,285,3,18,9,0,284,283,
  	1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,287,5,51,0,0,287,23,1,0,0,
  	0,288,292,3,110,55,0,289,292,3,112,56,0,290,292,3,74,37,0,291,288,1,0,
  	0,0,291,289,1,0,0,0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,
  	294,5,60,0,0,294,25,1,0,0,0,295,296,3,140,70,0,296,297,5,8,0,0,297,298,
  	5,48,0,0,298,299,3,76,38,0,299,300,5,49,0,0,300,301,5,60,0,0,301,27,1,
  	0,0,0,302,303,3,140,70,0,303,304,5,9,0,0,304,305,5,48,0,0,305,308,3,76,
  	38,0,306,307,5,54,0,0,307,309,3,126,63,0,308,306,1,0,0,0,308,309,1,0,
  	0,0,309,310,1,0,0,0,310,311,5,49,0,0,311,312,5,60,0,0,312,29,1,0,0,0,
  	313,314,5,10,0,0,314,315,3,76,38,0,315,316,5,60,0,0,316,31,1,0,0,0,317,
  	318,3,140,70,0,318,319,5,11,0,0,319,320,5,48,0,0,320,323,3,76,38,0,321,
  	322,5,54,0,0,322,324,3,126,63,0,323,321,1,0,0,0,323,324,1,0,0,0,324,325,
  	1,0,0,0,325,326,5,49,0,0,326,327,5,60,0,0,327,33,1,0,0,0,328,329,3,140,
  	70,0,329,330,5,12,0,0,330,331,5,48,0,0,331,334,3,76,38,0,332,333,5,54,
  	0,0,333,335,3,126,63,0,334,332,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,
  	0,336,337,5,49,0,0,337,338,5,60,0,0,338,35,1,0,0,0,339,342,5,13,0,0,340,
  	341,5,48,0,0,341,343,5,49,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,344,
  	1,0,0,0,344,345,5,60,0,0,345,37,1,0,0,0,346,349,5,14,0,0,347,348,5,48,
  	0,0,348,350,5,49,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,
  	351,352,5,60,0,0,352,39,1,0,0,0,353,354,5,15,0,0,354,355,5,48,0,0,355,
  	356,3,76,38,0,356,357,5,49,0,0,357,360,3,14,7,0,358,359,5,16,0,0,359,
  	361,3,14,7,0,360,358,1,0,0,0,360,361,1,0,0,0,361,41,1,0,0,0,362,363,5,
  	18,0,0,363,364,5,48,0,0,364,365,3,76,38,0,365,366,5,49,0,0,366,367,3,
  	14,7,0,367,43,1,0,0,0,368,369,5,17,0,0,369,370,3,14,7,0,370,371,5,18,
  	0,0,371,372,5,48,0,0,372,373,3,76,38,0,373,374,5,49,0,0,374,375,5,60,
  	0,0,375,45,1,0,0,0,376,377,5,19,0,0,377,379,5,48,0,0,378,380,3,74,37,
  	0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,383,5,60,0,0,382,
  	384,3,76,38,0,383,382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,387,
  	5,60,0,0,386,388,3,74,37,0,387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,
  	0,0,0,389,390,5,49,0,0,390,391,3,14,7,0,391,47,1,0,0,0,392,393,5,20,0,
  	0,393,394,5,48,0,0,394,397,3,178,89,0,395,396,5,54,0,0,396,398,3,178,
  	89,0,397,395,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,21,0,0,
  	400,401,3,76,38,0,401,402,5,49,0,0,402,403,3,14,7,0,403,49,1,0,0,0,404,
  	405,5,22,0,0,405,406,5,48,0,0,406,407,3,76,38,0,407,408,5,49,0,0,408,
  	409,3,22,11,0,409,51,1,0,0,0,410,413,5,23,0,0,411,414,3,186,93,0,412,
  	414,3,182,91,0,413,411,1,0,0,0,413,412,1,0,0,0,414,415,1,0,0,0,415,416,
  	5,59,0,0,416,53,1,0,0,0,417,418,5,24,0,0,418,419,5,59,0,0,419,55,1,0,
  	0,0,420,421,5,25,0,0,421,422,5,60,0,0,422,57,1,0,0,0,423,424,5,26,0,0,
  	424,425,5,60,0,0,425,59,1,0,0,0,426,428,5,27,0,0,427,429,3,76,38,0,428,
  	427,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,431,5,60,0,0,431,61,1,
  	0,0,0,432,433,5,28,0,0,433,434,5,60,0,0,434,63,1,0,0,0,435,436,5,29,0,
  	0,436,438,5,48,0,0,437,439,3,126,63,0,438,437,1,0,0,0,438,439,1,0,0,0,
  	439,440,1,0,0,0,440,441,5,49,0,0,441,442,5,60,0,0,442,65,1,0,0,0,443,
  	444,5,30,0,0,444,446,5,48,0,0,445,447,3,126,63,0,446,445,1,0,0,0,446,
  	447,1,0,0,0,447,448,1,0,0,0,448,449,5,49,0,0,449,450,5,60,0,0,450,67,
  	1,0,0,0,451,452,5,31,0,0,452,454,5,48,0,0,453,455,3,126,63,0,454,453,
  	1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,5,49,0,0,457,458,5,60,
  	0,0,458,69,1,0,0,0,459,460,5,32,0,0,460,462,5,48,0,0,461,463,3,126,63,
  	0,462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,465,5,49,0,0,465,
  	466,5,60,0,0,466,71,1,0,0,0,467,468,5,33,0,0,468,470,5,48,0,0,469,471,
  	3,126,63,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,473,5,
  	49,0,0,473,474,5,60,0,0,474,73,1,0,0,0,475,476,3,128,64,0,476,477,5,76,
  	0,0,477,478,3,76,38,0,478,494,1,0,0,0,479,480,3,134,67,0,480,481,7,0,
  	0,0,481,482,3,76,38,0,482,494,1,0,0,0,483,484,5,62,0,0,484,494,3,134,
  	67,0,485,486,3,134,67,0,486,487,5,62,0,0,487,494,1,0,0,0,488,489,5,63,
  	0,0,489,494,3,134,67,0,490,491,3,134,67,0,491,492,5,63,0,0,492,494,1,
  	0,0,0,493,475,1,0,0,0,493,479,1,0,0,0,493,483,1,0,0,0,493,485,1,0,0,0,
  	493,488,1,0,0,0,493,490,1,0,0,0,494,75,1,0,0,0,495,496,3,78,39,0,496,
  	77,1,0,0,0,497,503,3,80,40,0,498,499,5,61,0,0,499,500,3,76,38,0,500,501,
  	5,59,0,0,501,502,3,78,39,0,502,504,1,0,0,0,503,498,1,0,0,0,503,504,1,
  	0,0,0,504,79,1,0,0,0,505,510,3,82,41,0,506,507,5,66,0,0,507,509,3,82,
  	41,0,508,506,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,
  	511,81,1,0,0,0,512,510,1,0,0,0,513,518,3,84,42,0,514,515,5,67,0,0,515,
  	517,3,84,42,0,516,514,1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,519,
  	1,0,0,0,519,83,1,0,0,0,520,518,1,0,0,0,521,526,3,86,43,0,522,523,5,87,
  	0,0,523,525,3,86,43,0,524,522,1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,
  	526,527,1,0,0,0,527,85,1,0,0,0,528,526,1,0,0,0,529,534,3,88,44,0,530,
  	531,5,88,0,0,531,533,3,88,44,0,532,530,1,0,0,0,533,536,1,0,0,0,534,532,
  	1,0,0,0,534,535,1,0,0,0,535,87,1,0,0,0,536,534,1,0,0,0,537,542,3,90,45,
  	0,538,539,5,89,0,0,539,541,3,90,45,0,540,538,1,0,0,0,541,544,1,0,0,0,
  	542,540,1,0,0,0,542,543,1,0,0,0,543,89,1,0,0,0,544,542,1,0,0,0,545,550,
  	3,92,46,0,546,547,7,1,0,0,547,549,3,92,46,0,548,546,1,0,0,0,549,552,1,
  	0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,91,1,0,0,0,552,550,1,0,0,0,
  	553,558,3,94,47,0,554,555,7,2,0,0,555,557,3,94,47,0,556,554,1,0,0,0,557,
  	560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,93,1,0,0,0,560,558,1,
  	0,0,0,561,566,3,96,48,0,562,563,7,3,0,0,563,565,3,96,48,0,564,562,1,0,
  	0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,95,1,0,0,0,568,
  	566,1,0,0,0,569,574,3,98,49,0,570,571,7,4,0,0,571,573,3,98,49,0,572,570,
  	1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,97,1,0,0,
  	0,576,574,1,0,0,0,577,582,3,100,50,0,578,579,7,5,0,0,579,581,3,100,50,
  	0,580,578,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,
  	99,1,0,0,0,584,582,1,0,0,0,585,590,3,102,51,0,586,590,3,104,52,0,587,
  	590,3,106,53,0,588,590,3,108,54,0,589,585,1,0,0,0,589,586,1,0,0,0,589,
  	587,1,0,0,0,589,588,1,0,0,0,590,101,1,0,0,0,591,592,5,75,0,0,592,593,
  	3,100,50,0,593,103,1,0,0,0,594,600,5,91,0,0,595,601,3,184,92,0,596,601,
  	3,186,93,0,597,601,3,178,89,0,598,601,3,132,66,0,599,601,3,142,71,0,600,
  	595,1,0,0,0,600,596,1,0,0,0,600,597,1,0,0,0,600,598,1,0,0,0,600,599,1,
  	0,0,0,601,105,1,0,0,0,602,603,5,94,0,0,603,604,5,100,0,0,604,107,1,0,
  	0,0,605,630,3,110,55,0,606,630,3,122,61,0,607,630,3,118,59,0,608,630,
  	3,120,60,0,609,630,3,130,65,0,610,630,3,142,71,0,611,630,3,154,77,0,612,
  	630,3,132,66,0,613,630,3,156,78,0,614,630,3,158,79,0,615,630,3,160,80,
  	0,616,630,3,162,81,0,617,630,3,164,82,0,618,630,3,166,83,0,619,630,3,
  	168,84,0,620,630,3,170,85,0,621,630,3,178,89,0,622,630,3,180,90,0,623,
  	630,3,182,91,0,624,630,3,172,86,0,625,630,3,184,92,0,626,630,3,186,93,
  	0,627,630,3,188,94,0,628,630,3,190,95,0,629,605,1,0,0,0,629,606,1,0,0,
  	0,629,607,1,0,0,0,629,608,1,0,0,0,629,609,1,0,0,0,629,610,1,0,0,0,629,
  	611,1,0,0,0,629,612,1,0,0,0,629,613,1,0,0,0,629,614,1,0,0,0,629,615,1,
  	0,0,0,629,616,1,0,0,0,629,617,1,0,0,0,629,618,1,0,0,0,629,619,1,0,0,0,
  	629,620,1,0,0,0,629,621,1,0,0,0,629,622,1,0,0,0,629,623,1,0,0,0,629,624,
  	1,0,0,0,629,625,1,0,0,0,629,626,1,0,0,0,629,627,1,0,0,0,629,628,1,0,0,
  	0,630,109,1,0,0,0,631,634,3,114,57,0,632,634,3,116,58,0,633,631,1,0,0,
  	0,633,632,1,0,0,0,634,111,1,0,0,0,635,638,3,140,70,0,636,639,3,114,57,
  	0,637,639,3,116,58,0,638,636,1,0,0,0,638,637,1,0,0,0,639,113,1,0,0,0,
  	640,642,7,6,0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,646,1,0,0,0,643,644,
  	3,174,87,0,644,645,5,58,0,0,645,647,1,0,0,0,646,643,1,0,0,0,646,647,1,
  	0,0,0,647,648,1,0,0,0,648,649,3,178,89,0,649,651,5,48,0,0,650,652,3,126,
  	63,0,651,650,1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,654,5,49,0,0,
  	654,115,1,0,0,0,655,657,7,7,0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,658,
  	1,0,0,0,658,659,5,52,0,0,659,660,5,52,0,0,660,661,3,76,38,0,661,662,5,
  	53,0,0,662,663,5,53,0,0,663,665,5,48,0,0,664,666,3,126,63,0,665,664,1,
  	0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,668,5,49,0,0,668,117,1,0,0,
  	0,669,670,5,46,0,0,670,671,5,48,0,0,671,672,3,76,38,0,672,673,5,49,0,
  	0,673,119,1,0,0,0,674,675,5,47,0,0,675,676,5,48,0,0,676,677,3,76,38,0,
  	677,678,5,49,0,0,678,121,1,0,0,0,679,681,3,174,87,0,680,679,1,0,0,0,680,
  	681,1,0,0,0,681,682,1,0,0,0,682,683,5,58,0,0,683,684,3,178,89,0,684,123,
  	1,0,0,0,685,690,3,178,89,0,686,687,5,54,0,0,687,689,3,178,89,0,688,686,
  	1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,125,1,0,0,
  	0,692,690,1,0,0,0,693,698,3,76,38,0,694,695,5,54,0,0,695,697,3,76,38,
  	0,696,694,1,0,0,0,697,700,1,0,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,
  	127,1,0,0,0,700,698,1,0,0,0,701,702,5,52,0,0,702,707,3,134,67,0,703,704,
  	5,54,0,0,704,706,3,134,67,0,705,703,1,0,0,0,706,709,1,0,0,0,707,705,1,
  	0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,707,1,0,0,0,710,711,5,53,0,
  	0,711,129,1,0,0,0,712,713,5,52,0,0,713,714,3,126,63,0,714,715,5,53,0,
  	0,715,131,1,0,0,0,716,717,5,48,0,0,717,718,3,76,38,0,718,719,5,49,0,0,
  	719,133,1,0,0,0,720,724,3,178,89,0,721,724,3,136,68,0,722,724,3,138,69,
  	0,723,720,1,0,0,0,723,721,1,0,0,0,723,722,1,0,0,0,724,135,1,0,0,0,725,
  	726,3,144,72,0,726,727,5,52,0,0,727,728,3,76,38,0,728,729,5,53,0,0,729,
  	137,1,0,0,0,730,731,3,142,71,0,731,732,5,55,0,0,732,733,3,176,88,0,733,
  	139,1,0,0,0,734,742,3,110,55,0,735,742,3,178,89,0,736,742,3,162,81,0,
  	737,742,3,164,82,0,738,742,3,166,83,0,739,742,3,168,84,0,740,742,3,142,
  	71,0,741,734,1,0,0,0,741,735,1,0,0,0,741,736,1,0,0,0,741,737,1,0,0,0,
  	741,738,1,0,0,0,741,739,1,0,0,0,741,740,1,0,0,0,742,141,1,0,0,0,743,747,
  	3,110,55,0,744,746,3,146,73,0,745,744,1,0,0,0,746,749,1,0,0,0,747,745,
  	1,0,0,0,747,748,1,0,0,0,748,800,1,0,0,0,749,747,1,0,0,0,750,754,3,178,
  	89,0,751,753,3,146,73,0,752,751,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,
  	0,754,755,1,0,0,0,755,800,1,0,0,0,756,754,1,0,0,0,757,759,3,162,81,0,
  	758,760,3,150,75,0,759,758,1,0,0,0,760,761,1,0,0,0,761,759,1,0,0,0,761,
  	762,1,0,0,0,762,766,1,0,0,0,763,765,3,146,73,0,764,763,1,0,0,0,765,768,
  	1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,767,800,1,0,0,0,768,766,1,0,0,
  	0,769,771,3,164,82,0,770,772,3,146,73,0,771,770,1,0,0,0,772,773,1,0,0,
  	0,773,771,1,0,0,0,773,774,1,0,0,0,774,800,1,0,0,0,775,777,3,166,83,0,
  	776,778,3,152,76,0,777,776,1,0,0,0,778,779,1,0,0,0,779,777,1,0,0,0,779,
  	780,1,0,0,0,780,784,1,0,0,0,781,783,3,146,73,0,782,781,1,0,0,0,783,786,
  	1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,800,1,0,0,0,786,784,1,0,0,
  	0,787,789,3,168,84,0,788,790,3,152,76,0,789,788,1,0,0,0,790,791,1,0,0,
  	0,791,789,1,0,0,0,791,792,1,0,0,0,792,796,1,0,0,0,793,795,3,146,73,0,
  	794,793,1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,800,
  	1,0,0,0,798,796,1,0,0,0,799,743,1,0,0,0,799,750,1,0,0,0,799,757,1,0,0,
  	0,799,769,1,0,0,0,799,775,1,0,0,0,799,787,1,0,0,0,800,143,1,0,0,0,801,
  	805,3,178,89,0,802,804,3,148,74,0,803,802,1,0,0,0,804,807,1,0,0,0,805,
  	803,1,0,0,0,805,806,1,0,0,0,806,851,1,0,0,0,807,805,1,0,0,0,808,810,3,
  	162,81,0,809,811,3,150,75,0,810,809,1,0,0,0,811,812,1,0,0,0,812,810,1,
  	0,0,0,812,813,1,0,0,0,813,817,1,0,0,0,814,816,3,148,74,0,815,814,1,0,
  	0,0,816,819,1,0,0,0,817,815,1,0,0,0,817,818,1,0,0,0,818,851,1,0,0,0,819,
  	817,1,0,0,0,820,822,3,164,82,0,821,823,3,148,74,0,822,821,1,0,0,0,823,
  	824,1,0,0,0,824,822,1,0,0,0,824,825,1,0,0,0,825,851,1,0,0,0,826,828,3,
  	166,83,0,827,829,3,152,76,0,828,827,1,0,0,0,829,830,1,0,0,0,830,828,1,
  	0,0,0,830,831,1,0,0,0,831,835,1,0,0,0,832,834,3,148,74,0,833,832,1,0,
  	0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,851,1,0,0,0,837,
  	835,1,0,0,0,838,840,3,168,84,0,839,841,3,152,76,0,840,839,1,0,0,0,841,
  	842,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,847,1,0,0,0,844,846,3,
  	148,74,0,845,844,1,0,0,0,846,849,1,0,0,0,847,845,1,0,0,0,847,848,1,0,
  	0,0,848,851,1,0,0,0,849,847,1,0,0,0,850,801,1,0,0,0,850,808,1,0,0,0,850,
  	820,1,0,0,0,850,826,1,0,0,0,850,838,1,0,0,0,851,145,1,0,0,0,852,853,5,
  	52,0,0,853,854,3,76,38,0,854,855,5,53,0,0,855,860,1,0,0,0,856,857,5,55,
  	0,0,857,860,3,176,88,0,858,860,3,110,55,0,859,852,1,0,0,0,859,856,1,0,
  	0,0,859,858,1,0,0,0,860,147,1,0,0,0,861,862,5,52,0,0,862,863,3,76,38,
  	0,863,864,5,53,0,0,864,868,1,0,0,0,865,866,5,55,0,0,866,868,3,176,88,
  	0,867,861,1,0,0,0,867,865,1,0,0,0,868,149,1,0,0,0,869,870,5,52,0,0,870,
  	871,3,76,38,0,871,872,5,53,0,0,872,151,1,0,0,0,873,874,5,55,0,0,874,875,
  	3,176,88,0,875,153,1,0,0,0,876,879,3,140,70,0,877,879,3,182,91,0,878,
  	876,1,0,0,0,878,877,1,0,0,0,879,880,1,0,0,0,880,881,5,55,0,0,881,882,
  	5,41,0,0,882,155,1,0,0,0,883,884,5,36,0,0,884,157,1,0,0,0,885,886,5,52,
  	0,0,886,887,5,53,0,0,887,159,1,0,0,0,888,889,5,40,0,0,889,161,1,0,0,0,
  	890,891,5,42,0,0,891,163,1,0,0,0,892,893,5,43,0,0,893,165,1,0,0,0,894,
  	895,5,44,0,0,895,167,1,0,0,0,896,897,5,45,0,0,897,169,1,0,0,0,898,899,
  	5,7,0,0,899,171,1,0,0,0,900,901,5,48,0,0,901,902,3,76,38,0,902,903,5,
  	54,0,0,903,904,3,76,38,0,904,905,5,54,0,0,905,906,3,76,38,0,906,907,5,
  	49,0,0,907,173,1,0,0,0,908,909,7,8,0,0,909,175,1,0,0,0,910,911,7,9,0,
  	0,911,177,1,0,0,0,912,913,7,10,0,0,913,179,1,0,0,0,914,915,5,98,0,0,915,
  	181,1,0,0,0,916,917,5,97,0,0,917,183,1,0,0,0,918,919,5,95,0,0,919,185,
  	1,0,0,0,920,921,5,96,0,0,921,187,1,0,0,0,922,923,5,39,0,0,923,189,1,0,
  	0,0,924,925,5,38,0,0,925,191,1,0,0,0,78,196,198,216,232,263,268,272,274,
  	278,284,291,308,323,334,342,349,360,379,383,387,397,413,428,438,446,454,
  	462,470,493,503,510,518,526,534,542,550,558,566,574,582,589,600,629,633,
  	638,641,646,651,656,665,680,690,698,707,723,741,747,754,761,766,773,779,
  	784,791,796,799,805,812,817,824,830,835,842,847,850,859,867,878
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gsc_iw_grammarParserStaticData = std::move(staticData);
}

}

gsc_iw_grammarParser::gsc_iw_grammarParser(TokenStream *input) : gsc_iw_grammarParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

gsc_iw_grammarParser::gsc_iw_grammarParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  gsc_iw_grammarParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *gsc_iw_grammarParserStaticData->atn, gsc_iw_grammarParserStaticData->decisionToDFA, gsc_iw_grammarParserStaticData->sharedContextCache, options);
}

gsc_iw_grammarParser::~gsc_iw_grammarParser() {
  delete _interpreter;
}

const atn::ATN& gsc_iw_grammarParser::getATN() const {
  return *gsc_iw_grammarParserStaticData->atn;
}

std::string gsc_iw_grammarParser::getGrammarFileName() const {
  return "gsc_iw_grammar.g4";
}

const std::vector<std::string>& gsc_iw_grammarParser::getRuleNames() const {
  return gsc_iw_grammarParserStaticData->ruleNames;
}

const dfa::Vocabulary& gsc_iw_grammarParser::getVocabulary() const {
  return gsc_iw_grammarParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView gsc_iw_grammarParser::getSerializedATN() const {
  return gsc_iw_grammarParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

gsc_iw_grammarParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::ProgramContext::EOF() {
  return getToken(gsc_iw_grammarParser::EOF, 0);
}

std::vector<gsc_iw_grammarParser::IncludeContext *> gsc_iw_grammarParser::ProgramContext::include() {
  return getRuleContexts<gsc_iw_grammarParser::IncludeContext>();
}

gsc_iw_grammarParser::IncludeContext* gsc_iw_grammarParser::ProgramContext::include(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::IncludeContext>(i);
}

std::vector<gsc_iw_grammarParser::InlineContext *> gsc_iw_grammarParser::ProgramContext::inline_() {
  return getRuleContexts<gsc_iw_grammarParser::InlineContext>();
}

gsc_iw_grammarParser::InlineContext* gsc_iw_grammarParser::ProgramContext::inline_(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::InlineContext>(i);
}

std::vector<gsc_iw_grammarParser::DeclarationContext *> gsc_iw_grammarParser::ProgramContext::declaration() {
  return getRuleContexts<gsc_iw_grammarParser::DeclarationContext>();
}

gsc_iw_grammarParser::DeclarationContext* gsc_iw_grammarParser::ProgramContext::declaration(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::DeclarationContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::ProgramContext::SEMICOLON() {
  return getTokens(gsc_iw_grammarParser::SEMICOLON);
}

tree::TerminalNode* gsc_iw_grammarParser::ProgramContext::SEMICOLON(size_t i) {
  return getToken(gsc_iw_grammarParser::SEMICOLON, i);
}


size_t gsc_iw_grammarParser::ProgramContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleProgram;
}

void gsc_iw_grammarParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void gsc_iw_grammarParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

gsc_iw_grammarParser::ProgramContext* gsc_iw_grammarParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, gsc_iw_grammarParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(198);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1152923703630102652) != 0) || _la == gsc_iw_grammarParser::IDENTIFIER) {
      setState(196);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case gsc_iw_grammarParser::INCLUDE: {
          setState(192);
          include();
          break;
        }

        case gsc_iw_grammarParser::INLINE: {
          setState(193);
          inline_();
          break;
        }

        case gsc_iw_grammarParser::DEVBEGIN:
        case gsc_iw_grammarParser::DEVEND:
        case gsc_iw_grammarParser::USINGTREE:
        case gsc_iw_grammarParser::SIZE:
        case gsc_iw_grammarParser::IDENTIFIER: {
          setState(194);
          declaration();
          break;
        }

        case gsc_iw_grammarParser::SEMICOLON: {
          setState(195);
          match(gsc_iw_grammarParser::SEMICOLON);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(200);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(201);
    match(gsc_iw_grammarParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IncludeContext ------------------------------------------------------------------

gsc_iw_grammarParser::IncludeContext::IncludeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::IncludeContext::INCLUDE() {
  return getToken(gsc_iw_grammarParser::INCLUDE, 0);
}

gsc_iw_grammarParser::Expr_pathContext* gsc_iw_grammarParser::IncludeContext::expr_path() {
  return getRuleContext<gsc_iw_grammarParser::Expr_pathContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::IncludeContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::IncludeContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleInclude;
}

void gsc_iw_grammarParser::IncludeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclude(this);
}

void gsc_iw_grammarParser::IncludeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclude(this);
}

gsc_iw_grammarParser::IncludeContext* gsc_iw_grammarParser::include() {
  IncludeContext *_localctx = _tracker.createInstance<IncludeContext>(_ctx, getState());
  enterRule(_localctx, 2, gsc_iw_grammarParser::RuleInclude);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(203);
    match(gsc_iw_grammarParser::INCLUDE);
    setState(204);
    expr_path();
    setState(205);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineContext ------------------------------------------------------------------

gsc_iw_grammarParser::InlineContext::InlineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::InlineContext::INLINE() {
  return getToken(gsc_iw_grammarParser::INLINE, 0);
}

gsc_iw_grammarParser::Expr_pathContext* gsc_iw_grammarParser::InlineContext::expr_path() {
  return getRuleContext<gsc_iw_grammarParser::Expr_pathContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::InlineContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::InlineContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleInline;
}

void gsc_iw_grammarParser::InlineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline(this);
}

void gsc_iw_grammarParser::InlineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline(this);
}

gsc_iw_grammarParser::InlineContext* gsc_iw_grammarParser::inline_() {
  InlineContext *_localctx = _tracker.createInstance<InlineContext>(_ctx, getState());
  enterRule(_localctx, 4, gsc_iw_grammarParser::RuleInline);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(207);
    match(gsc_iw_grammarParser::INLINE);
    setState(208);
    expr_path();
    setState(209);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

gsc_iw_grammarParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::DeclarationContext::DEVBEGIN() {
  return getToken(gsc_iw_grammarParser::DEVBEGIN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::DeclarationContext::DEVEND() {
  return getToken(gsc_iw_grammarParser::DEVEND, 0);
}

gsc_iw_grammarParser::Decl_usingtreeContext* gsc_iw_grammarParser::DeclarationContext::decl_usingtree() {
  return getRuleContext<gsc_iw_grammarParser::Decl_usingtreeContext>(0);
}

gsc_iw_grammarParser::Decl_constantContext* gsc_iw_grammarParser::DeclarationContext::decl_constant() {
  return getRuleContext<gsc_iw_grammarParser::Decl_constantContext>(0);
}

gsc_iw_grammarParser::Decl_functionContext* gsc_iw_grammarParser::DeclarationContext::decl_function() {
  return getRuleContext<gsc_iw_grammarParser::Decl_functionContext>(0);
}


size_t gsc_iw_grammarParser::DeclarationContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleDeclaration;
}

void gsc_iw_grammarParser::DeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration(this);
}

void gsc_iw_grammarParser::DeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration(this);
}

gsc_iw_grammarParser::DeclarationContext* gsc_iw_grammarParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 6, gsc_iw_grammarParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(216);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(211);
      match(gsc_iw_grammarParser::DEVBEGIN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(212);
      match(gsc_iw_grammarParser::DEVEND);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(213);
      decl_usingtree();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(214);
      decl_constant();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(215);
      decl_function();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_usingtreeContext ------------------------------------------------------------------

gsc_iw_grammarParser::Decl_usingtreeContext::Decl_usingtreeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Decl_usingtreeContext::USINGTREE() {
  return getToken(gsc_iw_grammarParser::USINGTREE, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Decl_usingtreeContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::Expr_stringContext* gsc_iw_grammarParser::Decl_usingtreeContext::expr_string() {
  return getRuleContext<gsc_iw_grammarParser::Expr_stringContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Decl_usingtreeContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Decl_usingtreeContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::Decl_usingtreeContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleDecl_usingtree;
}

void gsc_iw_grammarParser::Decl_usingtreeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecl_usingtree(this);
}

void gsc_iw_grammarParser::Decl_usingtreeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecl_usingtree(this);
}

gsc_iw_grammarParser::Decl_usingtreeContext* gsc_iw_grammarParser::decl_usingtree() {
  Decl_usingtreeContext *_localctx = _tracker.createInstance<Decl_usingtreeContext>(_ctx, getState());
  enterRule(_localctx, 8, gsc_iw_grammarParser::RuleDecl_usingtree);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(218);
    match(gsc_iw_grammarParser::USINGTREE);
    setState(219);
    match(gsc_iw_grammarParser::LPAREN);
    setState(220);
    expr_string();
    setState(221);
    match(gsc_iw_grammarParser::RPAREN);
    setState(222);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_constantContext ------------------------------------------------------------------

gsc_iw_grammarParser::Decl_constantContext::Decl_constantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Decl_constantContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Decl_constantContext::ASSIGN() {
  return getToken(gsc_iw_grammarParser::ASSIGN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Decl_constantContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Decl_constantContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::Decl_constantContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleDecl_constant;
}

void gsc_iw_grammarParser::Decl_constantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecl_constant(this);
}

void gsc_iw_grammarParser::Decl_constantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecl_constant(this);
}

gsc_iw_grammarParser::Decl_constantContext* gsc_iw_grammarParser::decl_constant() {
  Decl_constantContext *_localctx = _tracker.createInstance<Decl_constantContext>(_ctx, getState());
  enterRule(_localctx, 10, gsc_iw_grammarParser::RuleDecl_constant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(224);
    expr_identifier();
    setState(225);
    match(gsc_iw_grammarParser::ASSIGN);
    setState(226);
    expr();
    setState(227);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_functionContext ------------------------------------------------------------------

gsc_iw_grammarParser::Decl_functionContext::Decl_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Decl_functionContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Decl_functionContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Decl_functionContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

gsc_iw_grammarParser::Stmt_compContext* gsc_iw_grammarParser::Decl_functionContext::stmt_comp() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_compContext>(0);
}

gsc_iw_grammarParser::Expr_parametersContext* gsc_iw_grammarParser::Decl_functionContext::expr_parameters() {
  return getRuleContext<gsc_iw_grammarParser::Expr_parametersContext>(0);
}


size_t gsc_iw_grammarParser::Decl_functionContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleDecl_function;
}

void gsc_iw_grammarParser::Decl_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecl_function(this);
}

void gsc_iw_grammarParser::Decl_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecl_function(this);
}

gsc_iw_grammarParser::Decl_functionContext* gsc_iw_grammarParser::decl_function() {
  Decl_functionContext *_localctx = _tracker.createInstance<Decl_functionContext>(_ctx, getState());
  enterRule(_localctx, 12, gsc_iw_grammarParser::RuleDecl_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(229);
    expr_identifier();
    setState(230);
    match(gsc_iw_grammarParser::LPAREN);
    setState(232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::SIZE

    || _la == gsc_iw_grammarParser::IDENTIFIER) {
      setState(231);
      expr_parameters();
    }
    setState(234);
    match(gsc_iw_grammarParser::RPAREN);
    setState(235);
    stmt_comp();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

gsc_iw_grammarParser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Stmt_compContext* gsc_iw_grammarParser::StmtContext::stmt_comp() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_compContext>(0);
}

gsc_iw_grammarParser::Stmt_exprContext* gsc_iw_grammarParser::StmtContext::stmt_expr() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_exprContext>(0);
}

gsc_iw_grammarParser::Stmt_endonContext* gsc_iw_grammarParser::StmtContext::stmt_endon() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_endonContext>(0);
}

gsc_iw_grammarParser::Stmt_notifyContext* gsc_iw_grammarParser::StmtContext::stmt_notify() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_notifyContext>(0);
}

gsc_iw_grammarParser::Stmt_waitContext* gsc_iw_grammarParser::StmtContext::stmt_wait() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_waitContext>(0);
}

gsc_iw_grammarParser::Stmt_waittillContext* gsc_iw_grammarParser::StmtContext::stmt_waittill() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_waittillContext>(0);
}

gsc_iw_grammarParser::Stmt_waittillmatchContext* gsc_iw_grammarParser::StmtContext::stmt_waittillmatch() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_waittillmatchContext>(0);
}

gsc_iw_grammarParser::Stmt_waittillframeendContext* gsc_iw_grammarParser::StmtContext::stmt_waittillframeend() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_waittillframeendContext>(0);
}

gsc_iw_grammarParser::Stmt_waitframeContext* gsc_iw_grammarParser::StmtContext::stmt_waitframe() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_waitframeContext>(0);
}

gsc_iw_grammarParser::Stmt_ifContext* gsc_iw_grammarParser::StmtContext::stmt_if() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_ifContext>(0);
}

gsc_iw_grammarParser::Stmt_whileContext* gsc_iw_grammarParser::StmtContext::stmt_while() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_whileContext>(0);
}

gsc_iw_grammarParser::Stmt_dowhileContext* gsc_iw_grammarParser::StmtContext::stmt_dowhile() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_dowhileContext>(0);
}

gsc_iw_grammarParser::Stmt_forContext* gsc_iw_grammarParser::StmtContext::stmt_for() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_forContext>(0);
}

gsc_iw_grammarParser::Stmt_foreachContext* gsc_iw_grammarParser::StmtContext::stmt_foreach() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_foreachContext>(0);
}

gsc_iw_grammarParser::Stmt_switchContext* gsc_iw_grammarParser::StmtContext::stmt_switch() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_switchContext>(0);
}

gsc_iw_grammarParser::Stmt_caseContext* gsc_iw_grammarParser::StmtContext::stmt_case() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_caseContext>(0);
}

gsc_iw_grammarParser::Stmt_defaultContext* gsc_iw_grammarParser::StmtContext::stmt_default() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_defaultContext>(0);
}

gsc_iw_grammarParser::Stmt_breakContext* gsc_iw_grammarParser::StmtContext::stmt_break() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_breakContext>(0);
}

gsc_iw_grammarParser::Stmt_continueContext* gsc_iw_grammarParser::StmtContext::stmt_continue() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_continueContext>(0);
}

gsc_iw_grammarParser::Stmt_returnContext* gsc_iw_grammarParser::StmtContext::stmt_return() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_returnContext>(0);
}

gsc_iw_grammarParser::Stmt_breakpointContext* gsc_iw_grammarParser::StmtContext::stmt_breakpoint() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_breakpointContext>(0);
}

gsc_iw_grammarParser::Stmt_prof_beginContext* gsc_iw_grammarParser::StmtContext::stmt_prof_begin() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_prof_beginContext>(0);
}

gsc_iw_grammarParser::Stmt_prof_endContext* gsc_iw_grammarParser::StmtContext::stmt_prof_end() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_prof_endContext>(0);
}

gsc_iw_grammarParser::Stmt_assertContext* gsc_iw_grammarParser::StmtContext::stmt_assert() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_assertContext>(0);
}

gsc_iw_grammarParser::Stmt_assertexContext* gsc_iw_grammarParser::StmtContext::stmt_assertex() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_assertexContext>(0);
}

gsc_iw_grammarParser::Stmt_assertmsgContext* gsc_iw_grammarParser::StmtContext::stmt_assertmsg() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_assertmsgContext>(0);
}


size_t gsc_iw_grammarParser::StmtContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt;
}

void gsc_iw_grammarParser::StmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt(this);
}

void gsc_iw_grammarParser::StmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt(this);
}

gsc_iw_grammarParser::StmtContext* gsc_iw_grammarParser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 14, gsc_iw_grammarParser::RuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(263);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(237);
      stmt_comp();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(238);
      stmt_expr();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(239);
      stmt_endon();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(240);
      stmt_notify();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(241);
      stmt_wait();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(242);
      stmt_waittill();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(243);
      stmt_waittillmatch();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(244);
      stmt_waittillframeend();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(245);
      stmt_waitframe();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(246);
      stmt_if();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(247);
      stmt_while();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(248);
      stmt_dowhile();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(249);
      stmt_for();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(250);
      stmt_foreach();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(251);
      stmt_switch();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(252);
      stmt_case();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(253);
      stmt_default();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(254);
      stmt_break();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(255);
      stmt_continue();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(256);
      stmt_return();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(257);
      stmt_breakpoint();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(258);
      stmt_prof_begin();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(259);
      stmt_prof_end();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(260);
      stmt_assert();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(261);
      stmt_assertex();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(262);
      stmt_assertmsg();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_listContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_listContext::Stmt_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::StmtContext *> gsc_iw_grammarParser::Stmt_listContext::stmt() {
  return getRuleContexts<gsc_iw_grammarParser::StmtContext>();
}

gsc_iw_grammarParser::StmtContext* gsc_iw_grammarParser::Stmt_listContext::stmt(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::StmtContext>(i);
}


size_t gsc_iw_grammarParser::Stmt_listContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_list;
}

void gsc_iw_grammarParser::Stmt_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_list(this);
}

void gsc_iw_grammarParser::Stmt_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_list(this);
}

gsc_iw_grammarParser::Stmt_listContext* gsc_iw_grammarParser::stmt_list() {
  Stmt_listContext *_localctx = _tracker.createInstance<Stmt_listContext>(_ctx, getState());
  enterRule(_localctx, 16, gsc_iw_grammarParser::RuleStmt_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(266); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(265);
      stmt();
      setState(268); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3453066638409145344) != 0) || _la == gsc_iw_grammarParser::IDENTIFIER

    || _la == gsc_iw_grammarParser::PATH);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_or_dev_listContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_or_dev_listContext::Stmt_or_dev_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::StmtContext *> gsc_iw_grammarParser::Stmt_or_dev_listContext::stmt() {
  return getRuleContexts<gsc_iw_grammarParser::StmtContext>();
}

gsc_iw_grammarParser::StmtContext* gsc_iw_grammarParser::Stmt_or_dev_listContext::stmt(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::StmtContext>(i);
}

std::vector<gsc_iw_grammarParser::Stmt_devContext *> gsc_iw_grammarParser::Stmt_or_dev_listContext::stmt_dev() {
  return getRuleContexts<gsc_iw_grammarParser::Stmt_devContext>();
}

gsc_iw_grammarParser::Stmt_devContext* gsc_iw_grammarParser::Stmt_or_dev_listContext::stmt_dev(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Stmt_devContext>(i);
}


size_t gsc_iw_grammarParser::Stmt_or_dev_listContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_or_dev_list;
}

void gsc_iw_grammarParser::Stmt_or_dev_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_or_dev_list(this);
}

void gsc_iw_grammarParser::Stmt_or_dev_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_or_dev_list(this);
}

gsc_iw_grammarParser::Stmt_or_dev_listContext* gsc_iw_grammarParser::stmt_or_dev_list() {
  Stmt_or_dev_listContext *_localctx = _tracker.createInstance<Stmt_or_dev_listContext>(_ctx, getState());
  enterRule(_localctx, 18, gsc_iw_grammarParser::RuleStmt_or_dev_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(272); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(272);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case gsc_iw_grammarParser::WAIT:
        case gsc_iw_grammarParser::WAITTILLFRAMEEND:
        case gsc_iw_grammarParser::WAITFRAME:
        case gsc_iw_grammarParser::IF:
        case gsc_iw_grammarParser::DO:
        case gsc_iw_grammarParser::WHILE:
        case gsc_iw_grammarParser::FOR:
        case gsc_iw_grammarParser::FOREACH:
        case gsc_iw_grammarParser::SWITCH:
        case gsc_iw_grammarParser::CASE:
        case gsc_iw_grammarParser::DEFAULT:
        case gsc_iw_grammarParser::BREAK:
        case gsc_iw_grammarParser::CONTINUE:
        case gsc_iw_grammarParser::RETURN:
        case gsc_iw_grammarParser::BREAKPOINT:
        case gsc_iw_grammarParser::PROFBEGIN:
        case gsc_iw_grammarParser::PROFEND:
        case gsc_iw_grammarParser::ASSERT:
        case gsc_iw_grammarParser::ASSERTEX:
        case gsc_iw_grammarParser::ASSERTMSG:
        case gsc_iw_grammarParser::THREAD:
        case gsc_iw_grammarParser::CHILDTHREAD:
        case gsc_iw_grammarParser::CALL:
        case gsc_iw_grammarParser::SIZE:
        case gsc_iw_grammarParser::GAME:
        case gsc_iw_grammarParser::SELF:
        case gsc_iw_grammarParser::ANIM:
        case gsc_iw_grammarParser::LEVEL:
        case gsc_iw_grammarParser::LBRACE:
        case gsc_iw_grammarParser::LBRACKET:
        case gsc_iw_grammarParser::SEMICOLON:
        case gsc_iw_grammarParser::INCREMENT:
        case gsc_iw_grammarParser::DECREMENT:
        case gsc_iw_grammarParser::IDENTIFIER:
        case gsc_iw_grammarParser::PATH: {
          setState(270);
          stmt();
          break;
        }

        case gsc_iw_grammarParser::DEVBEGIN: {
          setState(271);
          stmt_dev();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(274); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3453066638409145340) != 0) || _la == gsc_iw_grammarParser::IDENTIFIER

    || _la == gsc_iw_grammarParser::PATH);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_devContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_devContext::Stmt_devContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_devContext::DEVBEGIN() {
  return getToken(gsc_iw_grammarParser::DEVBEGIN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_devContext::DEVEND() {
  return getToken(gsc_iw_grammarParser::DEVEND, 0);
}

gsc_iw_grammarParser::Stmt_listContext* gsc_iw_grammarParser::Stmt_devContext::stmt_list() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_listContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_devContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_dev;
}

void gsc_iw_grammarParser::Stmt_devContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_dev(this);
}

void gsc_iw_grammarParser::Stmt_devContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_dev(this);
}

gsc_iw_grammarParser::Stmt_devContext* gsc_iw_grammarParser::stmt_dev() {
  Stmt_devContext *_localctx = _tracker.createInstance<Stmt_devContext>(_ctx, getState());
  enterRule(_localctx, 20, gsc_iw_grammarParser::RuleStmt_dev);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(276);
    match(gsc_iw_grammarParser::DEVBEGIN);
    setState(278);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3453066638409145344) != 0) || _la == gsc_iw_grammarParser::IDENTIFIER

    || _la == gsc_iw_grammarParser::PATH) {
      setState(277);
      stmt_list();
    }
    setState(280);
    match(gsc_iw_grammarParser::DEVEND);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_compContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_compContext::Stmt_compContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_compContext::LBRACE() {
  return getToken(gsc_iw_grammarParser::LBRACE, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_compContext::RBRACE() {
  return getToken(gsc_iw_grammarParser::RBRACE, 0);
}

gsc_iw_grammarParser::Stmt_or_dev_listContext* gsc_iw_grammarParser::Stmt_compContext::stmt_or_dev_list() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_or_dev_listContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_compContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_comp;
}

void gsc_iw_grammarParser::Stmt_compContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_comp(this);
}

void gsc_iw_grammarParser::Stmt_compContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_comp(this);
}

gsc_iw_grammarParser::Stmt_compContext* gsc_iw_grammarParser::stmt_comp() {
  Stmt_compContext *_localctx = _tracker.createInstance<Stmt_compContext>(_ctx, getState());
  enterRule(_localctx, 22, gsc_iw_grammarParser::RuleStmt_comp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(282);
    match(gsc_iw_grammarParser::LBRACE);
    setState(284);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3453066638409145340) != 0) || _la == gsc_iw_grammarParser::IDENTIFIER

    || _la == gsc_iw_grammarParser::PATH) {
      setState(283);
      stmt_or_dev_list();
    }
    setState(286);
    match(gsc_iw_grammarParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_exprContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_exprContext::Stmt_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_exprContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

gsc_iw_grammarParser::Expr_callContext* gsc_iw_grammarParser::Stmt_exprContext::expr_call() {
  return getRuleContext<gsc_iw_grammarParser::Expr_callContext>(0);
}

gsc_iw_grammarParser::Expr_methodContext* gsc_iw_grammarParser::Stmt_exprContext::expr_method() {
  return getRuleContext<gsc_iw_grammarParser::Expr_methodContext>(0);
}

gsc_iw_grammarParser::Expr_assignContext* gsc_iw_grammarParser::Stmt_exprContext::expr_assign() {
  return getRuleContext<gsc_iw_grammarParser::Expr_assignContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_exprContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_expr;
}

void gsc_iw_grammarParser::Stmt_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_expr(this);
}

void gsc_iw_grammarParser::Stmt_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_expr(this);
}

gsc_iw_grammarParser::Stmt_exprContext* gsc_iw_grammarParser::stmt_expr() {
  Stmt_exprContext *_localctx = _tracker.createInstance<Stmt_exprContext>(_ctx, getState());
  enterRule(_localctx, 24, gsc_iw_grammarParser::RuleStmt_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(291);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(288);
      expr_call();
      break;
    }

    case 2: {
      setState(289);
      expr_method();
      break;
    }

    case 3: {
      setState(290);
      expr_assign();
      break;
    }

    default:
      break;
    }
    setState(293);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_endonContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_endonContext::Stmt_endonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_objectContext* gsc_iw_grammarParser::Stmt_endonContext::expr_object() {
  return getRuleContext<gsc_iw_grammarParser::Expr_objectContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_endonContext::ENDON() {
  return getToken(gsc_iw_grammarParser::ENDON, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_endonContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_endonContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_endonContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_endonContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::Stmt_endonContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_endon;
}

void gsc_iw_grammarParser::Stmt_endonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_endon(this);
}

void gsc_iw_grammarParser::Stmt_endonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_endon(this);
}

gsc_iw_grammarParser::Stmt_endonContext* gsc_iw_grammarParser::stmt_endon() {
  Stmt_endonContext *_localctx = _tracker.createInstance<Stmt_endonContext>(_ctx, getState());
  enterRule(_localctx, 26, gsc_iw_grammarParser::RuleStmt_endon);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(295);
    expr_object();
    setState(296);
    match(gsc_iw_grammarParser::ENDON);
    setState(297);
    match(gsc_iw_grammarParser::LPAREN);
    setState(298);
    expr();
    setState(299);
    match(gsc_iw_grammarParser::RPAREN);
    setState(300);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_notifyContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_notifyContext::Stmt_notifyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_objectContext* gsc_iw_grammarParser::Stmt_notifyContext::expr_object() {
  return getRuleContext<gsc_iw_grammarParser::Expr_objectContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_notifyContext::NOTIFY() {
  return getToken(gsc_iw_grammarParser::NOTIFY, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_notifyContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_notifyContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_notifyContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_notifyContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_notifyContext::COMMA() {
  return getToken(gsc_iw_grammarParser::COMMA, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Stmt_notifyContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_notifyContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_notify;
}

void gsc_iw_grammarParser::Stmt_notifyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_notify(this);
}

void gsc_iw_grammarParser::Stmt_notifyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_notify(this);
}

gsc_iw_grammarParser::Stmt_notifyContext* gsc_iw_grammarParser::stmt_notify() {
  Stmt_notifyContext *_localctx = _tracker.createInstance<Stmt_notifyContext>(_ctx, getState());
  enterRule(_localctx, 28, gsc_iw_grammarParser::RuleStmt_notify);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(302);
    expr_object();
    setState(303);
    match(gsc_iw_grammarParser::NOTIFY);
    setState(304);
    match(gsc_iw_grammarParser::LPAREN);
    setState(305);
    expr();
    setState(308);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::COMMA) {
      setState(306);
      match(gsc_iw_grammarParser::COMMA);
      setState(307);
      expr_arguments();
    }
    setState(310);
    match(gsc_iw_grammarParser::RPAREN);
    setState(311);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_waitContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_waitContext::Stmt_waitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waitContext::WAIT() {
  return getToken(gsc_iw_grammarParser::WAIT, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_waitContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waitContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::Stmt_waitContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_wait;
}

void gsc_iw_grammarParser::Stmt_waitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_wait(this);
}

void gsc_iw_grammarParser::Stmt_waitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_wait(this);
}

gsc_iw_grammarParser::Stmt_waitContext* gsc_iw_grammarParser::stmt_wait() {
  Stmt_waitContext *_localctx = _tracker.createInstance<Stmt_waitContext>(_ctx, getState());
  enterRule(_localctx, 30, gsc_iw_grammarParser::RuleStmt_wait);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(313);
    match(gsc_iw_grammarParser::WAIT);
    setState(314);
    expr();
    setState(315);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_waittillContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_waittillContext::Stmt_waittillContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_objectContext* gsc_iw_grammarParser::Stmt_waittillContext::expr_object() {
  return getRuleContext<gsc_iw_grammarParser::Expr_objectContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillContext::WAITTILL() {
  return getToken(gsc_iw_grammarParser::WAITTILL, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_waittillContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillContext::COMMA() {
  return getToken(gsc_iw_grammarParser::COMMA, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Stmt_waittillContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_waittillContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_waittill;
}

void gsc_iw_grammarParser::Stmt_waittillContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_waittill(this);
}

void gsc_iw_grammarParser::Stmt_waittillContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_waittill(this);
}

gsc_iw_grammarParser::Stmt_waittillContext* gsc_iw_grammarParser::stmt_waittill() {
  Stmt_waittillContext *_localctx = _tracker.createInstance<Stmt_waittillContext>(_ctx, getState());
  enterRule(_localctx, 32, gsc_iw_grammarParser::RuleStmt_waittill);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(317);
    expr_object();
    setState(318);
    match(gsc_iw_grammarParser::WAITTILL);
    setState(319);
    match(gsc_iw_grammarParser::LPAREN);
    setState(320);
    expr();
    setState(323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::COMMA) {
      setState(321);
      match(gsc_iw_grammarParser::COMMA);
      setState(322);
      expr_arguments();
    }
    setState(325);
    match(gsc_iw_grammarParser::RPAREN);
    setState(326);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_waittillmatchContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_waittillmatchContext::Stmt_waittillmatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_objectContext* gsc_iw_grammarParser::Stmt_waittillmatchContext::expr_object() {
  return getRuleContext<gsc_iw_grammarParser::Expr_objectContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillmatchContext::WAITTILLMATCH() {
  return getToken(gsc_iw_grammarParser::WAITTILLMATCH, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillmatchContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_waittillmatchContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillmatchContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillmatchContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillmatchContext::COMMA() {
  return getToken(gsc_iw_grammarParser::COMMA, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Stmt_waittillmatchContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_waittillmatchContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_waittillmatch;
}

void gsc_iw_grammarParser::Stmt_waittillmatchContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_waittillmatch(this);
}

void gsc_iw_grammarParser::Stmt_waittillmatchContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_waittillmatch(this);
}

gsc_iw_grammarParser::Stmt_waittillmatchContext* gsc_iw_grammarParser::stmt_waittillmatch() {
  Stmt_waittillmatchContext *_localctx = _tracker.createInstance<Stmt_waittillmatchContext>(_ctx, getState());
  enterRule(_localctx, 34, gsc_iw_grammarParser::RuleStmt_waittillmatch);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(328);
    expr_object();
    setState(329);
    match(gsc_iw_grammarParser::WAITTILLMATCH);
    setState(330);
    match(gsc_iw_grammarParser::LPAREN);
    setState(331);
    expr();
    setState(334);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::COMMA) {
      setState(332);
      match(gsc_iw_grammarParser::COMMA);
      setState(333);
      expr_arguments();
    }
    setState(336);
    match(gsc_iw_grammarParser::RPAREN);
    setState(337);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_waittillframeendContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_waittillframeendContext::Stmt_waittillframeendContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillframeendContext::WAITTILLFRAMEEND() {
  return getToken(gsc_iw_grammarParser::WAITTILLFRAMEEND, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillframeendContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillframeendContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waittillframeendContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}


size_t gsc_iw_grammarParser::Stmt_waittillframeendContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_waittillframeend;
}

void gsc_iw_grammarParser::Stmt_waittillframeendContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_waittillframeend(this);
}

void gsc_iw_grammarParser::Stmt_waittillframeendContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_waittillframeend(this);
}

gsc_iw_grammarParser::Stmt_waittillframeendContext* gsc_iw_grammarParser::stmt_waittillframeend() {
  Stmt_waittillframeendContext *_localctx = _tracker.createInstance<Stmt_waittillframeendContext>(_ctx, getState());
  enterRule(_localctx, 36, gsc_iw_grammarParser::RuleStmt_waittillframeend);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(339);
    match(gsc_iw_grammarParser::WAITTILLFRAMEEND);
    setState(342);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::LPAREN) {
      setState(340);
      match(gsc_iw_grammarParser::LPAREN);
      setState(341);
      match(gsc_iw_grammarParser::RPAREN);
    }
    setState(344);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_waitframeContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_waitframeContext::Stmt_waitframeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waitframeContext::WAITFRAME() {
  return getToken(gsc_iw_grammarParser::WAITFRAME, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waitframeContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waitframeContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_waitframeContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}


size_t gsc_iw_grammarParser::Stmt_waitframeContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_waitframe;
}

void gsc_iw_grammarParser::Stmt_waitframeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_waitframe(this);
}

void gsc_iw_grammarParser::Stmt_waitframeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_waitframe(this);
}

gsc_iw_grammarParser::Stmt_waitframeContext* gsc_iw_grammarParser::stmt_waitframe() {
  Stmt_waitframeContext *_localctx = _tracker.createInstance<Stmt_waitframeContext>(_ctx, getState());
  enterRule(_localctx, 38, gsc_iw_grammarParser::RuleStmt_waitframe);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(346);
    match(gsc_iw_grammarParser::WAITFRAME);
    setState(349);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::LPAREN) {
      setState(347);
      match(gsc_iw_grammarParser::LPAREN);
      setState(348);
      match(gsc_iw_grammarParser::RPAREN);
    }
    setState(351);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_ifContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_ifContext::Stmt_ifContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_ifContext::IF() {
  return getToken(gsc_iw_grammarParser::IF, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_ifContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_ifContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_ifContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

std::vector<gsc_iw_grammarParser::StmtContext *> gsc_iw_grammarParser::Stmt_ifContext::stmt() {
  return getRuleContexts<gsc_iw_grammarParser::StmtContext>();
}

gsc_iw_grammarParser::StmtContext* gsc_iw_grammarParser::Stmt_ifContext::stmt(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::StmtContext>(i);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_ifContext::ELSE() {
  return getToken(gsc_iw_grammarParser::ELSE, 0);
}


size_t gsc_iw_grammarParser::Stmt_ifContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_if;
}

void gsc_iw_grammarParser::Stmt_ifContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_if(this);
}

void gsc_iw_grammarParser::Stmt_ifContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_if(this);
}

gsc_iw_grammarParser::Stmt_ifContext* gsc_iw_grammarParser::stmt_if() {
  Stmt_ifContext *_localctx = _tracker.createInstance<Stmt_ifContext>(_ctx, getState());
  enterRule(_localctx, 40, gsc_iw_grammarParser::RuleStmt_if);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(353);
    match(gsc_iw_grammarParser::IF);
    setState(354);
    match(gsc_iw_grammarParser::LPAREN);
    setState(355);
    expr();
    setState(356);
    match(gsc_iw_grammarParser::RPAREN);
    setState(357);
    stmt();
    setState(360);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(358);
      match(gsc_iw_grammarParser::ELSE);
      setState(359);
      stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_whileContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_whileContext::Stmt_whileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_whileContext::WHILE() {
  return getToken(gsc_iw_grammarParser::WHILE, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_whileContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_whileContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_whileContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

gsc_iw_grammarParser::StmtContext* gsc_iw_grammarParser::Stmt_whileContext::stmt() {
  return getRuleContext<gsc_iw_grammarParser::StmtContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_whileContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_while;
}

void gsc_iw_grammarParser::Stmt_whileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_while(this);
}

void gsc_iw_grammarParser::Stmt_whileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_while(this);
}

gsc_iw_grammarParser::Stmt_whileContext* gsc_iw_grammarParser::stmt_while() {
  Stmt_whileContext *_localctx = _tracker.createInstance<Stmt_whileContext>(_ctx, getState());
  enterRule(_localctx, 42, gsc_iw_grammarParser::RuleStmt_while);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(362);
    match(gsc_iw_grammarParser::WHILE);
    setState(363);
    match(gsc_iw_grammarParser::LPAREN);
    setState(364);
    expr();
    setState(365);
    match(gsc_iw_grammarParser::RPAREN);
    setState(366);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_dowhileContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_dowhileContext::Stmt_dowhileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_dowhileContext::DO() {
  return getToken(gsc_iw_grammarParser::DO, 0);
}

gsc_iw_grammarParser::StmtContext* gsc_iw_grammarParser::Stmt_dowhileContext::stmt() {
  return getRuleContext<gsc_iw_grammarParser::StmtContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_dowhileContext::WHILE() {
  return getToken(gsc_iw_grammarParser::WHILE, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_dowhileContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_dowhileContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_dowhileContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_dowhileContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::Stmt_dowhileContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_dowhile;
}

void gsc_iw_grammarParser::Stmt_dowhileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_dowhile(this);
}

void gsc_iw_grammarParser::Stmt_dowhileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_dowhile(this);
}

gsc_iw_grammarParser::Stmt_dowhileContext* gsc_iw_grammarParser::stmt_dowhile() {
  Stmt_dowhileContext *_localctx = _tracker.createInstance<Stmt_dowhileContext>(_ctx, getState());
  enterRule(_localctx, 44, gsc_iw_grammarParser::RuleStmt_dowhile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(368);
    match(gsc_iw_grammarParser::DO);
    setState(369);
    stmt();
    setState(370);
    match(gsc_iw_grammarParser::WHILE);
    setState(371);
    match(gsc_iw_grammarParser::LPAREN);
    setState(372);
    expr();
    setState(373);
    match(gsc_iw_grammarParser::RPAREN);
    setState(374);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_forContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_forContext::Stmt_forContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_forContext::FOR() {
  return getToken(gsc_iw_grammarParser::FOR, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_forContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Stmt_forContext::SEMICOLON() {
  return getTokens(gsc_iw_grammarParser::SEMICOLON);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_forContext::SEMICOLON(size_t i) {
  return getToken(gsc_iw_grammarParser::SEMICOLON, i);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_forContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

gsc_iw_grammarParser::StmtContext* gsc_iw_grammarParser::Stmt_forContext::stmt() {
  return getRuleContext<gsc_iw_grammarParser::StmtContext>(0);
}

std::vector<gsc_iw_grammarParser::Expr_assignContext *> gsc_iw_grammarParser::Stmt_forContext::expr_assign() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_assignContext>();
}

gsc_iw_grammarParser::Expr_assignContext* gsc_iw_grammarParser::Stmt_forContext::expr_assign(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_assignContext>(i);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_forContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_forContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_for;
}

void gsc_iw_grammarParser::Stmt_forContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_for(this);
}

void gsc_iw_grammarParser::Stmt_forContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_for(this);
}

gsc_iw_grammarParser::Stmt_forContext* gsc_iw_grammarParser::stmt_for() {
  Stmt_forContext *_localctx = _tracker.createInstance<Stmt_forContext>(_ctx, getState());
  enterRule(_localctx, 46, gsc_iw_grammarParser::RuleStmt_for);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(376);
    match(gsc_iw_grammarParser::FOR);
    setState(377);
    match(gsc_iw_grammarParser::LPAREN);
    setState(379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4607114060100534272) != 0) || _la == gsc_iw_grammarParser::IDENTIFIER

    || _la == gsc_iw_grammarParser::PATH) {
      setState(378);
      expr_assign();
    }
    setState(381);
    match(gsc_iw_grammarParser::SEMICOLON);
    setState(383);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 293296908552634496) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 116981761) != 0)) {
      setState(382);
      expr();
    }
    setState(385);
    match(gsc_iw_grammarParser::SEMICOLON);
    setState(387);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4607114060100534272) != 0) || _la == gsc_iw_grammarParser::IDENTIFIER

    || _la == gsc_iw_grammarParser::PATH) {
      setState(386);
      expr_assign();
    }
    setState(389);
    match(gsc_iw_grammarParser::RPAREN);
    setState(390);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_foreachContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_foreachContext::Stmt_foreachContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_foreachContext::FOREACH() {
  return getToken(gsc_iw_grammarParser::FOREACH, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_foreachContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

std::vector<gsc_iw_grammarParser::Expr_identifierContext *> gsc_iw_grammarParser::Stmt_foreachContext::expr_identifier() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_identifierContext>();
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Stmt_foreachContext::expr_identifier(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(i);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_foreachContext::IN() {
  return getToken(gsc_iw_grammarParser::IN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_foreachContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_foreachContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

gsc_iw_grammarParser::StmtContext* gsc_iw_grammarParser::Stmt_foreachContext::stmt() {
  return getRuleContext<gsc_iw_grammarParser::StmtContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_foreachContext::COMMA() {
  return getToken(gsc_iw_grammarParser::COMMA, 0);
}


size_t gsc_iw_grammarParser::Stmt_foreachContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_foreach;
}

void gsc_iw_grammarParser::Stmt_foreachContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_foreach(this);
}

void gsc_iw_grammarParser::Stmt_foreachContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_foreach(this);
}

gsc_iw_grammarParser::Stmt_foreachContext* gsc_iw_grammarParser::stmt_foreach() {
  Stmt_foreachContext *_localctx = _tracker.createInstance<Stmt_foreachContext>(_ctx, getState());
  enterRule(_localctx, 48, gsc_iw_grammarParser::RuleStmt_foreach);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(392);
    match(gsc_iw_grammarParser::FOREACH);
    setState(393);
    match(gsc_iw_grammarParser::LPAREN);
    setState(394);
    expr_identifier();
    setState(397);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::COMMA) {
      setState(395);
      match(gsc_iw_grammarParser::COMMA);
      setState(396);
      expr_identifier();
    }
    setState(399);
    match(gsc_iw_grammarParser::IN);
    setState(400);
    expr();
    setState(401);
    match(gsc_iw_grammarParser::RPAREN);
    setState(402);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_switchContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_switchContext::Stmt_switchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_switchContext::SWITCH() {
  return getToken(gsc_iw_grammarParser::SWITCH, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_switchContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_switchContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_switchContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

gsc_iw_grammarParser::Stmt_compContext* gsc_iw_grammarParser::Stmt_switchContext::stmt_comp() {
  return getRuleContext<gsc_iw_grammarParser::Stmt_compContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_switchContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_switch;
}

void gsc_iw_grammarParser::Stmt_switchContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_switch(this);
}

void gsc_iw_grammarParser::Stmt_switchContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_switch(this);
}

gsc_iw_grammarParser::Stmt_switchContext* gsc_iw_grammarParser::stmt_switch() {
  Stmt_switchContext *_localctx = _tracker.createInstance<Stmt_switchContext>(_ctx, getState());
  enterRule(_localctx, 50, gsc_iw_grammarParser::RuleStmt_switch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(404);
    match(gsc_iw_grammarParser::SWITCH);
    setState(405);
    match(gsc_iw_grammarParser::LPAREN);
    setState(406);
    expr();
    setState(407);
    match(gsc_iw_grammarParser::RPAREN);
    setState(408);
    stmt_comp();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_caseContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_caseContext::Stmt_caseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_caseContext::CASE() {
  return getToken(gsc_iw_grammarParser::CASE, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_caseContext::COLON() {
  return getToken(gsc_iw_grammarParser::COLON, 0);
}

gsc_iw_grammarParser::Expr_integerContext* gsc_iw_grammarParser::Stmt_caseContext::expr_integer() {
  return getRuleContext<gsc_iw_grammarParser::Expr_integerContext>(0);
}

gsc_iw_grammarParser::Expr_stringContext* gsc_iw_grammarParser::Stmt_caseContext::expr_string() {
  return getRuleContext<gsc_iw_grammarParser::Expr_stringContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_caseContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_case;
}

void gsc_iw_grammarParser::Stmt_caseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_case(this);
}

void gsc_iw_grammarParser::Stmt_caseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_case(this);
}

gsc_iw_grammarParser::Stmt_caseContext* gsc_iw_grammarParser::stmt_case() {
  Stmt_caseContext *_localctx = _tracker.createInstance<Stmt_caseContext>(_ctx, getState());
  enterRule(_localctx, 52, gsc_iw_grammarParser::RuleStmt_case);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(410);
    match(gsc_iw_grammarParser::CASE);
    setState(413);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case gsc_iw_grammarParser::INTEGER: {
        setState(411);
        expr_integer();
        break;
      }

      case gsc_iw_grammarParser::STRING: {
        setState(412);
        expr_string();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(415);
    match(gsc_iw_grammarParser::COLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_defaultContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_defaultContext::Stmt_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_defaultContext::DEFAULT() {
  return getToken(gsc_iw_grammarParser::DEFAULT, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_defaultContext::COLON() {
  return getToken(gsc_iw_grammarParser::COLON, 0);
}


size_t gsc_iw_grammarParser::Stmt_defaultContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_default;
}

void gsc_iw_grammarParser::Stmt_defaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_default(this);
}

void gsc_iw_grammarParser::Stmt_defaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_default(this);
}

gsc_iw_grammarParser::Stmt_defaultContext* gsc_iw_grammarParser::stmt_default() {
  Stmt_defaultContext *_localctx = _tracker.createInstance<Stmt_defaultContext>(_ctx, getState());
  enterRule(_localctx, 54, gsc_iw_grammarParser::RuleStmt_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(417);
    match(gsc_iw_grammarParser::DEFAULT);
    setState(418);
    match(gsc_iw_grammarParser::COLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_breakContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_breakContext::Stmt_breakContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_breakContext::BREAK() {
  return getToken(gsc_iw_grammarParser::BREAK, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_breakContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::Stmt_breakContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_break;
}

void gsc_iw_grammarParser::Stmt_breakContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_break(this);
}

void gsc_iw_grammarParser::Stmt_breakContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_break(this);
}

gsc_iw_grammarParser::Stmt_breakContext* gsc_iw_grammarParser::stmt_break() {
  Stmt_breakContext *_localctx = _tracker.createInstance<Stmt_breakContext>(_ctx, getState());
  enterRule(_localctx, 56, gsc_iw_grammarParser::RuleStmt_break);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(420);
    match(gsc_iw_grammarParser::BREAK);
    setState(421);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_continueContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_continueContext::Stmt_continueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_continueContext::CONTINUE() {
  return getToken(gsc_iw_grammarParser::CONTINUE, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_continueContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::Stmt_continueContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_continue;
}

void gsc_iw_grammarParser::Stmt_continueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_continue(this);
}

void gsc_iw_grammarParser::Stmt_continueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_continue(this);
}

gsc_iw_grammarParser::Stmt_continueContext* gsc_iw_grammarParser::stmt_continue() {
  Stmt_continueContext *_localctx = _tracker.createInstance<Stmt_continueContext>(_ctx, getState());
  enterRule(_localctx, 58, gsc_iw_grammarParser::RuleStmt_continue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(423);
    match(gsc_iw_grammarParser::CONTINUE);
    setState(424);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_returnContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_returnContext::Stmt_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_returnContext::RETURN() {
  return getToken(gsc_iw_grammarParser::RETURN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_returnContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Stmt_returnContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_returnContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_return;
}

void gsc_iw_grammarParser::Stmt_returnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_return(this);
}

void gsc_iw_grammarParser::Stmt_returnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_return(this);
}

gsc_iw_grammarParser::Stmt_returnContext* gsc_iw_grammarParser::stmt_return() {
  Stmt_returnContext *_localctx = _tracker.createInstance<Stmt_returnContext>(_ctx, getState());
  enterRule(_localctx, 60, gsc_iw_grammarParser::RuleStmt_return);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(426);
    match(gsc_iw_grammarParser::RETURN);
    setState(428);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 293296908552634496) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 116981761) != 0)) {
      setState(427);
      expr();
    }
    setState(430);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_breakpointContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_breakpointContext::Stmt_breakpointContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_breakpointContext::BREAKPOINT() {
  return getToken(gsc_iw_grammarParser::BREAKPOINT, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_breakpointContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}


size_t gsc_iw_grammarParser::Stmt_breakpointContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_breakpoint;
}

void gsc_iw_grammarParser::Stmt_breakpointContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_breakpoint(this);
}

void gsc_iw_grammarParser::Stmt_breakpointContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_breakpoint(this);
}

gsc_iw_grammarParser::Stmt_breakpointContext* gsc_iw_grammarParser::stmt_breakpoint() {
  Stmt_breakpointContext *_localctx = _tracker.createInstance<Stmt_breakpointContext>(_ctx, getState());
  enterRule(_localctx, 62, gsc_iw_grammarParser::RuleStmt_breakpoint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(432);
    match(gsc_iw_grammarParser::BREAKPOINT);
    setState(433);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_prof_beginContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_prof_beginContext::Stmt_prof_beginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_prof_beginContext::PROFBEGIN() {
  return getToken(gsc_iw_grammarParser::PROFBEGIN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_prof_beginContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_prof_beginContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_prof_beginContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Stmt_prof_beginContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_prof_beginContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_prof_begin;
}

void gsc_iw_grammarParser::Stmt_prof_beginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_prof_begin(this);
}

void gsc_iw_grammarParser::Stmt_prof_beginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_prof_begin(this);
}

gsc_iw_grammarParser::Stmt_prof_beginContext* gsc_iw_grammarParser::stmt_prof_begin() {
  Stmt_prof_beginContext *_localctx = _tracker.createInstance<Stmt_prof_beginContext>(_ctx, getState());
  enterRule(_localctx, 64, gsc_iw_grammarParser::RuleStmt_prof_begin);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(435);
    match(gsc_iw_grammarParser::PROFBEGIN);
    setState(436);
    match(gsc_iw_grammarParser::LPAREN);
    setState(438);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 293296908552634496) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 116981761) != 0)) {
      setState(437);
      expr_arguments();
    }
    setState(440);
    match(gsc_iw_grammarParser::RPAREN);
    setState(441);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_prof_endContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_prof_endContext::Stmt_prof_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_prof_endContext::PROFEND() {
  return getToken(gsc_iw_grammarParser::PROFEND, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_prof_endContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_prof_endContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_prof_endContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Stmt_prof_endContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_prof_endContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_prof_end;
}

void gsc_iw_grammarParser::Stmt_prof_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_prof_end(this);
}

void gsc_iw_grammarParser::Stmt_prof_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_prof_end(this);
}

gsc_iw_grammarParser::Stmt_prof_endContext* gsc_iw_grammarParser::stmt_prof_end() {
  Stmt_prof_endContext *_localctx = _tracker.createInstance<Stmt_prof_endContext>(_ctx, getState());
  enterRule(_localctx, 66, gsc_iw_grammarParser::RuleStmt_prof_end);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(443);
    match(gsc_iw_grammarParser::PROFEND);
    setState(444);
    match(gsc_iw_grammarParser::LPAREN);
    setState(446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 293296908552634496) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 116981761) != 0)) {
      setState(445);
      expr_arguments();
    }
    setState(448);
    match(gsc_iw_grammarParser::RPAREN);
    setState(449);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_assertContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_assertContext::Stmt_assertContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertContext::ASSERT() {
  return getToken(gsc_iw_grammarParser::ASSERT, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Stmt_assertContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_assertContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_assert;
}

void gsc_iw_grammarParser::Stmt_assertContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_assert(this);
}

void gsc_iw_grammarParser::Stmt_assertContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_assert(this);
}

gsc_iw_grammarParser::Stmt_assertContext* gsc_iw_grammarParser::stmt_assert() {
  Stmt_assertContext *_localctx = _tracker.createInstance<Stmt_assertContext>(_ctx, getState());
  enterRule(_localctx, 68, gsc_iw_grammarParser::RuleStmt_assert);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(451);
    match(gsc_iw_grammarParser::ASSERT);
    setState(452);
    match(gsc_iw_grammarParser::LPAREN);
    setState(454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 293296908552634496) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 116981761) != 0)) {
      setState(453);
      expr_arguments();
    }
    setState(456);
    match(gsc_iw_grammarParser::RPAREN);
    setState(457);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_assertexContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_assertexContext::Stmt_assertexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertexContext::ASSERTEX() {
  return getToken(gsc_iw_grammarParser::ASSERTEX, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertexContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertexContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertexContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Stmt_assertexContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_assertexContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_assertex;
}

void gsc_iw_grammarParser::Stmt_assertexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_assertex(this);
}

void gsc_iw_grammarParser::Stmt_assertexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_assertex(this);
}

gsc_iw_grammarParser::Stmt_assertexContext* gsc_iw_grammarParser::stmt_assertex() {
  Stmt_assertexContext *_localctx = _tracker.createInstance<Stmt_assertexContext>(_ctx, getState());
  enterRule(_localctx, 70, gsc_iw_grammarParser::RuleStmt_assertex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(459);
    match(gsc_iw_grammarParser::ASSERTEX);
    setState(460);
    match(gsc_iw_grammarParser::LPAREN);
    setState(462);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 293296908552634496) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 116981761) != 0)) {
      setState(461);
      expr_arguments();
    }
    setState(464);
    match(gsc_iw_grammarParser::RPAREN);
    setState(465);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stmt_assertmsgContext ------------------------------------------------------------------

gsc_iw_grammarParser::Stmt_assertmsgContext::Stmt_assertmsgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertmsgContext::ASSERTMSG() {
  return getToken(gsc_iw_grammarParser::ASSERTMSG, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertmsgContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertmsgContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Stmt_assertmsgContext::SEMICOLON() {
  return getToken(gsc_iw_grammarParser::SEMICOLON, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Stmt_assertmsgContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}


size_t gsc_iw_grammarParser::Stmt_assertmsgContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleStmt_assertmsg;
}

void gsc_iw_grammarParser::Stmt_assertmsgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt_assertmsg(this);
}

void gsc_iw_grammarParser::Stmt_assertmsgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt_assertmsg(this);
}

gsc_iw_grammarParser::Stmt_assertmsgContext* gsc_iw_grammarParser::stmt_assertmsg() {
  Stmt_assertmsgContext *_localctx = _tracker.createInstance<Stmt_assertmsgContext>(_ctx, getState());
  enterRule(_localctx, 72, gsc_iw_grammarParser::RuleStmt_assertmsg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(467);
    match(gsc_iw_grammarParser::ASSERTMSG);
    setState(468);
    match(gsc_iw_grammarParser::LPAREN);
    setState(470);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 293296908552634496) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 116981761) != 0)) {
      setState(469);
      expr_arguments();
    }
    setState(472);
    match(gsc_iw_grammarParser::RPAREN);
    setState(473);
    match(gsc_iw_grammarParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_assignContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_assignContext::Expr_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_tupleContext* gsc_iw_grammarParser::Expr_assignContext::expr_tuple() {
  return getRuleContext<gsc_iw_grammarParser::Expr_tupleContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::ASSIGN() {
  return getToken(gsc_iw_grammarParser::ASSIGN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_assignContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

gsc_iw_grammarParser::Expr_lvalueContext* gsc_iw_grammarParser::Expr_assignContext::expr_lvalue() {
  return getRuleContext<gsc_iw_grammarParser::Expr_lvalueContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::ABWOR() {
  return getToken(gsc_iw_grammarParser::ABWOR, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::ABWXOR() {
  return getToken(gsc_iw_grammarParser::ABWXOR, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::ABWAND() {
  return getToken(gsc_iw_grammarParser::ABWAND, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::ALSH() {
  return getToken(gsc_iw_grammarParser::ALSH, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::ARSH() {
  return getToken(gsc_iw_grammarParser::ARSH, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::AADD() {
  return getToken(gsc_iw_grammarParser::AADD, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::ASUB() {
  return getToken(gsc_iw_grammarParser::ASUB, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::AMUL() {
  return getToken(gsc_iw_grammarParser::AMUL, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::ADIV() {
  return getToken(gsc_iw_grammarParser::ADIV, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::AMOD() {
  return getToken(gsc_iw_grammarParser::AMOD, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::INCREMENT() {
  return getToken(gsc_iw_grammarParser::INCREMENT, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_assignContext::DECREMENT() {
  return getToken(gsc_iw_grammarParser::DECREMENT, 0);
}


size_t gsc_iw_grammarParser::Expr_assignContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_assign;
}

void gsc_iw_grammarParser::Expr_assignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_assign(this);
}

void gsc_iw_grammarParser::Expr_assignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_assign(this);
}

gsc_iw_grammarParser::Expr_assignContext* gsc_iw_grammarParser::expr_assign() {
  Expr_assignContext *_localctx = _tracker.createInstance<Expr_assignContext>(_ctx, getState());
  enterRule(_localctx, 74, gsc_iw_grammarParser::RuleExpr_assign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(493);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(475);
      expr_tuple();
      setState(476);
      match(gsc_iw_grammarParser::ASSIGN);
      setState(477);
      expr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(479);
      expr_lvalue();
      setState(480);
      _la = _input->LA(1);
      if (!(((((_la - 76) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 76)) & 2047) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(481);
      expr();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(483);
      match(gsc_iw_grammarParser::INCREMENT);
      setState(484);
      expr_lvalue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(485);
      expr_lvalue();
      setState(486);
      match(gsc_iw_grammarParser::INCREMENT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(488);
      match(gsc_iw_grammarParser::DECREMENT);
      setState(489);
      expr_lvalue();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(490);
      expr_lvalue();
      setState(491);
      match(gsc_iw_grammarParser::DECREMENT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

gsc_iw_grammarParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_ternaryContext* gsc_iw_grammarParser::ExprContext::expr_ternary() {
  return getRuleContext<gsc_iw_grammarParser::Expr_ternaryContext>(0);
}


size_t gsc_iw_grammarParser::ExprContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr;
}

void gsc_iw_grammarParser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void gsc_iw_grammarParser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 76, gsc_iw_grammarParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(495);
    expr_ternary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_ternaryContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_ternaryContext::Expr_ternaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_orContext* gsc_iw_grammarParser::Expr_ternaryContext::expr_or() {
  return getRuleContext<gsc_iw_grammarParser::Expr_orContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_ternaryContext::QMARK() {
  return getToken(gsc_iw_grammarParser::QMARK, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_ternaryContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_ternaryContext::COLON() {
  return getToken(gsc_iw_grammarParser::COLON, 0);
}

gsc_iw_grammarParser::Expr_ternaryContext* gsc_iw_grammarParser::Expr_ternaryContext::expr_ternary() {
  return getRuleContext<gsc_iw_grammarParser::Expr_ternaryContext>(0);
}


size_t gsc_iw_grammarParser::Expr_ternaryContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_ternary;
}

void gsc_iw_grammarParser::Expr_ternaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_ternary(this);
}

void gsc_iw_grammarParser::Expr_ternaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_ternary(this);
}

gsc_iw_grammarParser::Expr_ternaryContext* gsc_iw_grammarParser::expr_ternary() {
  Expr_ternaryContext *_localctx = _tracker.createInstance<Expr_ternaryContext>(_ctx, getState());
  enterRule(_localctx, 78, gsc_iw_grammarParser::RuleExpr_ternary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    expr_or();
    setState(503);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::QMARK) {
      setState(498);
      match(gsc_iw_grammarParser::QMARK);
      setState(499);
      expr();
      setState(500);
      match(gsc_iw_grammarParser::COLON);
      setState(501);
      expr_ternary();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_orContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_orContext::Expr_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_andContext *> gsc_iw_grammarParser::Expr_orContext::expr_and() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_andContext>();
}

gsc_iw_grammarParser::Expr_andContext* gsc_iw_grammarParser::Expr_orContext::expr_and(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_andContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_orContext::OR() {
  return getTokens(gsc_iw_grammarParser::OR);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_orContext::OR(size_t i) {
  return getToken(gsc_iw_grammarParser::OR, i);
}


size_t gsc_iw_grammarParser::Expr_orContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_or;
}

void gsc_iw_grammarParser::Expr_orContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_or(this);
}

void gsc_iw_grammarParser::Expr_orContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_or(this);
}

gsc_iw_grammarParser::Expr_orContext* gsc_iw_grammarParser::expr_or() {
  Expr_orContext *_localctx = _tracker.createInstance<Expr_orContext>(_ctx, getState());
  enterRule(_localctx, 80, gsc_iw_grammarParser::RuleExpr_or);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(505);
    expr_and();
    setState(510);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::OR) {
      setState(506);
      match(gsc_iw_grammarParser::OR);
      setState(507);
      expr_and();
      setState(512);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_andContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_andContext::Expr_andContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_bw_orContext *> gsc_iw_grammarParser::Expr_andContext::expr_bw_or() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_bw_orContext>();
}

gsc_iw_grammarParser::Expr_bw_orContext* gsc_iw_grammarParser::Expr_andContext::expr_bw_or(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_bw_orContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_andContext::AND() {
  return getTokens(gsc_iw_grammarParser::AND);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_andContext::AND(size_t i) {
  return getToken(gsc_iw_grammarParser::AND, i);
}


size_t gsc_iw_grammarParser::Expr_andContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_and;
}

void gsc_iw_grammarParser::Expr_andContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_and(this);
}

void gsc_iw_grammarParser::Expr_andContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_and(this);
}

gsc_iw_grammarParser::Expr_andContext* gsc_iw_grammarParser::expr_and() {
  Expr_andContext *_localctx = _tracker.createInstance<Expr_andContext>(_ctx, getState());
  enterRule(_localctx, 82, gsc_iw_grammarParser::RuleExpr_and);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(513);
    expr_bw_or();
    setState(518);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::AND) {
      setState(514);
      match(gsc_iw_grammarParser::AND);
      setState(515);
      expr_bw_or();
      setState(520);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_bw_orContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_bw_orContext::Expr_bw_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_bw_xorContext *> gsc_iw_grammarParser::Expr_bw_orContext::expr_bw_xor() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_bw_xorContext>();
}

gsc_iw_grammarParser::Expr_bw_xorContext* gsc_iw_grammarParser::Expr_bw_orContext::expr_bw_xor(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_bw_xorContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_bw_orContext::BW_OR() {
  return getTokens(gsc_iw_grammarParser::BW_OR);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_bw_orContext::BW_OR(size_t i) {
  return getToken(gsc_iw_grammarParser::BW_OR, i);
}


size_t gsc_iw_grammarParser::Expr_bw_orContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_bw_or;
}

void gsc_iw_grammarParser::Expr_bw_orContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_bw_or(this);
}

void gsc_iw_grammarParser::Expr_bw_orContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_bw_or(this);
}

gsc_iw_grammarParser::Expr_bw_orContext* gsc_iw_grammarParser::expr_bw_or() {
  Expr_bw_orContext *_localctx = _tracker.createInstance<Expr_bw_orContext>(_ctx, getState());
  enterRule(_localctx, 84, gsc_iw_grammarParser::RuleExpr_bw_or);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(521);
    expr_bw_xor();
    setState(526);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::BW_OR) {
      setState(522);
      match(gsc_iw_grammarParser::BW_OR);
      setState(523);
      expr_bw_xor();
      setState(528);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_bw_xorContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_bw_xorContext::Expr_bw_xorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_bw_andContext *> gsc_iw_grammarParser::Expr_bw_xorContext::expr_bw_and() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_bw_andContext>();
}

gsc_iw_grammarParser::Expr_bw_andContext* gsc_iw_grammarParser::Expr_bw_xorContext::expr_bw_and(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_bw_andContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_bw_xorContext::BW_XOR() {
  return getTokens(gsc_iw_grammarParser::BW_XOR);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_bw_xorContext::BW_XOR(size_t i) {
  return getToken(gsc_iw_grammarParser::BW_XOR, i);
}


size_t gsc_iw_grammarParser::Expr_bw_xorContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_bw_xor;
}

void gsc_iw_grammarParser::Expr_bw_xorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_bw_xor(this);
}

void gsc_iw_grammarParser::Expr_bw_xorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_bw_xor(this);
}

gsc_iw_grammarParser::Expr_bw_xorContext* gsc_iw_grammarParser::expr_bw_xor() {
  Expr_bw_xorContext *_localctx = _tracker.createInstance<Expr_bw_xorContext>(_ctx, getState());
  enterRule(_localctx, 86, gsc_iw_grammarParser::RuleExpr_bw_xor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(529);
    expr_bw_and();
    setState(534);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::BW_XOR) {
      setState(530);
      match(gsc_iw_grammarParser::BW_XOR);
      setState(531);
      expr_bw_and();
      setState(536);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_bw_andContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_bw_andContext::Expr_bw_andContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_equalityContext *> gsc_iw_grammarParser::Expr_bw_andContext::expr_equality() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_equalityContext>();
}

gsc_iw_grammarParser::Expr_equalityContext* gsc_iw_grammarParser::Expr_bw_andContext::expr_equality(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_equalityContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_bw_andContext::BW_AND() {
  return getTokens(gsc_iw_grammarParser::BW_AND);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_bw_andContext::BW_AND(size_t i) {
  return getToken(gsc_iw_grammarParser::BW_AND, i);
}


size_t gsc_iw_grammarParser::Expr_bw_andContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_bw_and;
}

void gsc_iw_grammarParser::Expr_bw_andContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_bw_and(this);
}

void gsc_iw_grammarParser::Expr_bw_andContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_bw_and(this);
}

gsc_iw_grammarParser::Expr_bw_andContext* gsc_iw_grammarParser::expr_bw_and() {
  Expr_bw_andContext *_localctx = _tracker.createInstance<Expr_bw_andContext>(_ctx, getState());
  enterRule(_localctx, 88, gsc_iw_grammarParser::RuleExpr_bw_and);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(537);
    expr_equality();
    setState(542);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::BW_AND) {
      setState(538);
      match(gsc_iw_grammarParser::BW_AND);
      setState(539);
      expr_equality();
      setState(544);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_equalityContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_equalityContext::Expr_equalityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_relationalContext *> gsc_iw_grammarParser::Expr_equalityContext::expr_relational() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_relationalContext>();
}

gsc_iw_grammarParser::Expr_relationalContext* gsc_iw_grammarParser::Expr_equalityContext::expr_relational(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_relationalContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_equalityContext::EQUALITY() {
  return getTokens(gsc_iw_grammarParser::EQUALITY);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_equalityContext::EQUALITY(size_t i) {
  return getToken(gsc_iw_grammarParser::EQUALITY, i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_equalityContext::INEQUALITY() {
  return getTokens(gsc_iw_grammarParser::INEQUALITY);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_equalityContext::INEQUALITY(size_t i) {
  return getToken(gsc_iw_grammarParser::INEQUALITY, i);
}


size_t gsc_iw_grammarParser::Expr_equalityContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_equality;
}

void gsc_iw_grammarParser::Expr_equalityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_equality(this);
}

void gsc_iw_grammarParser::Expr_equalityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_equality(this);
}

gsc_iw_grammarParser::Expr_equalityContext* gsc_iw_grammarParser::expr_equality() {
  Expr_equalityContext *_localctx = _tracker.createInstance<Expr_equalityContext>(_ctx, getState());
  enterRule(_localctx, 90, gsc_iw_grammarParser::RuleExpr_equality);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(545);
    expr_relational();
    setState(550);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::EQUALITY

    || _la == gsc_iw_grammarParser::INEQUALITY) {
      setState(546);
      _la = _input->LA(1);
      if (!(_la == gsc_iw_grammarParser::EQUALITY

      || _la == gsc_iw_grammarParser::INEQUALITY)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(547);
      expr_relational();
      setState(552);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_relationalContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_relationalContext::Expr_relationalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_shiftContext *> gsc_iw_grammarParser::Expr_relationalContext::expr_shift() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_shiftContext>();
}

gsc_iw_grammarParser::Expr_shiftContext* gsc_iw_grammarParser::Expr_relationalContext::expr_shift(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_shiftContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_relationalContext::LESS() {
  return getTokens(gsc_iw_grammarParser::LESS);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_relationalContext::LESS(size_t i) {
  return getToken(gsc_iw_grammarParser::LESS, i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_relationalContext::LESS_EQUAL() {
  return getTokens(gsc_iw_grammarParser::LESS_EQUAL);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_relationalContext::LESS_EQUAL(size_t i) {
  return getToken(gsc_iw_grammarParser::LESS_EQUAL, i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_relationalContext::GREATER() {
  return getTokens(gsc_iw_grammarParser::GREATER);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_relationalContext::GREATER(size_t i) {
  return getToken(gsc_iw_grammarParser::GREATER, i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_relationalContext::GREATER_EQUAL() {
  return getTokens(gsc_iw_grammarParser::GREATER_EQUAL);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_relationalContext::GREATER_EQUAL(size_t i) {
  return getToken(gsc_iw_grammarParser::GREATER_EQUAL, i);
}


size_t gsc_iw_grammarParser::Expr_relationalContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_relational;
}

void gsc_iw_grammarParser::Expr_relationalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_relational(this);
}

void gsc_iw_grammarParser::Expr_relationalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_relational(this);
}

gsc_iw_grammarParser::Expr_relationalContext* gsc_iw_grammarParser::expr_relational() {
  Expr_relationalContext *_localctx = _tracker.createInstance<Expr_relationalContext>(_ctx, getState());
  enterRule(_localctx, 92, gsc_iw_grammarParser::RuleExpr_relational);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(553);
    expr_shift();
    setState(558);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 15) != 0)) {
      setState(554);
      _la = _input->LA(1);
      if (!(((((_la - 70) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 70)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(555);
      expr_shift();
      setState(560);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_shiftContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_shiftContext::Expr_shiftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_additiveContext *> gsc_iw_grammarParser::Expr_shiftContext::expr_additive() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_additiveContext>();
}

gsc_iw_grammarParser::Expr_additiveContext* gsc_iw_grammarParser::Expr_shiftContext::expr_additive(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_additiveContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_shiftContext::LSHIFT() {
  return getTokens(gsc_iw_grammarParser::LSHIFT);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_shiftContext::LSHIFT(size_t i) {
  return getToken(gsc_iw_grammarParser::LSHIFT, i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_shiftContext::RSHIFT() {
  return getTokens(gsc_iw_grammarParser::RSHIFT);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_shiftContext::RSHIFT(size_t i) {
  return getToken(gsc_iw_grammarParser::RSHIFT, i);
}


size_t gsc_iw_grammarParser::Expr_shiftContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_shift;
}

void gsc_iw_grammarParser::Expr_shiftContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_shift(this);
}

void gsc_iw_grammarParser::Expr_shiftContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_shift(this);
}

gsc_iw_grammarParser::Expr_shiftContext* gsc_iw_grammarParser::expr_shift() {
  Expr_shiftContext *_localctx = _tracker.createInstance<Expr_shiftContext>(_ctx, getState());
  enterRule(_localctx, 94, gsc_iw_grammarParser::RuleExpr_shift);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(561);
    expr_additive();
    setState(566);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::LSHIFT

    || _la == gsc_iw_grammarParser::RSHIFT) {
      setState(562);
      _la = _input->LA(1);
      if (!(_la == gsc_iw_grammarParser::LSHIFT

      || _la == gsc_iw_grammarParser::RSHIFT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(563);
      expr_additive();
      setState(568);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_additiveContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_additiveContext::Expr_additiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_multiplicativeContext *> gsc_iw_grammarParser::Expr_additiveContext::expr_multiplicative() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_multiplicativeContext>();
}

gsc_iw_grammarParser::Expr_multiplicativeContext* gsc_iw_grammarParser::Expr_additiveContext::expr_multiplicative(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_multiplicativeContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_additiveContext::ADD() {
  return getTokens(gsc_iw_grammarParser::ADD);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_additiveContext::ADD(size_t i) {
  return getToken(gsc_iw_grammarParser::ADD, i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_additiveContext::SUB() {
  return getTokens(gsc_iw_grammarParser::SUB);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_additiveContext::SUB(size_t i) {
  return getToken(gsc_iw_grammarParser::SUB, i);
}


size_t gsc_iw_grammarParser::Expr_additiveContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_additive;
}

void gsc_iw_grammarParser::Expr_additiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_additive(this);
}

void gsc_iw_grammarParser::Expr_additiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_additive(this);
}

gsc_iw_grammarParser::Expr_additiveContext* gsc_iw_grammarParser::expr_additive() {
  Expr_additiveContext *_localctx = _tracker.createInstance<Expr_additiveContext>(_ctx, getState());
  enterRule(_localctx, 96, gsc_iw_grammarParser::RuleExpr_additive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(569);
    expr_multiplicative();
    setState(574);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::ADD

    || _la == gsc_iw_grammarParser::SUB) {
      setState(570);
      _la = _input->LA(1);
      if (!(_la == gsc_iw_grammarParser::ADD

      || _la == gsc_iw_grammarParser::SUB)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(571);
      expr_multiplicative();
      setState(576);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_multiplicativeContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_multiplicativeContext::Expr_multiplicativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_unaryContext *> gsc_iw_grammarParser::Expr_multiplicativeContext::expr_unary() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_unaryContext>();
}

gsc_iw_grammarParser::Expr_unaryContext* gsc_iw_grammarParser::Expr_multiplicativeContext::expr_unary(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_unaryContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_multiplicativeContext::MUL() {
  return getTokens(gsc_iw_grammarParser::MUL);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_multiplicativeContext::MUL(size_t i) {
  return getToken(gsc_iw_grammarParser::MUL, i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_multiplicativeContext::DIV() {
  return getTokens(gsc_iw_grammarParser::DIV);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_multiplicativeContext::DIV(size_t i) {
  return getToken(gsc_iw_grammarParser::DIV, i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_multiplicativeContext::MOD() {
  return getTokens(gsc_iw_grammarParser::MOD);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_multiplicativeContext::MOD(size_t i) {
  return getToken(gsc_iw_grammarParser::MOD, i);
}


size_t gsc_iw_grammarParser::Expr_multiplicativeContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_multiplicative;
}

void gsc_iw_grammarParser::Expr_multiplicativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_multiplicative(this);
}

void gsc_iw_grammarParser::Expr_multiplicativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_multiplicative(this);
}

gsc_iw_grammarParser::Expr_multiplicativeContext* gsc_iw_grammarParser::expr_multiplicative() {
  Expr_multiplicativeContext *_localctx = _tracker.createInstance<Expr_multiplicativeContext>(_ctx, getState());
  enterRule(_localctx, 98, gsc_iw_grammarParser::RuleExpr_multiplicative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(577);
    expr_unary();
    setState(582);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & 7) != 0)) {
      setState(578);
      _la = _input->LA(1);
      if (!(((((_la - 92) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 92)) & 7) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(579);
      expr_unary();
      setState(584);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_unaryContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_unaryContext::Expr_unaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_complementContext* gsc_iw_grammarParser::Expr_unaryContext::expr_complement() {
  return getRuleContext<gsc_iw_grammarParser::Expr_complementContext>(0);
}

gsc_iw_grammarParser::Expr_negateContext* gsc_iw_grammarParser::Expr_unaryContext::expr_negate() {
  return getRuleContext<gsc_iw_grammarParser::Expr_negateContext>(0);
}

gsc_iw_grammarParser::Expr_animationContext* gsc_iw_grammarParser::Expr_unaryContext::expr_animation() {
  return getRuleContext<gsc_iw_grammarParser::Expr_animationContext>(0);
}

gsc_iw_grammarParser::Expr_primaryContext* gsc_iw_grammarParser::Expr_unaryContext::expr_primary() {
  return getRuleContext<gsc_iw_grammarParser::Expr_primaryContext>(0);
}


size_t gsc_iw_grammarParser::Expr_unaryContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_unary;
}

void gsc_iw_grammarParser::Expr_unaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_unary(this);
}

void gsc_iw_grammarParser::Expr_unaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_unary(this);
}

gsc_iw_grammarParser::Expr_unaryContext* gsc_iw_grammarParser::expr_unary() {
  Expr_unaryContext *_localctx = _tracker.createInstance<Expr_unaryContext>(_ctx, getState());
  enterRule(_localctx, 100, gsc_iw_grammarParser::RuleExpr_unary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(589);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case gsc_iw_grammarParser::COMPLEMENT: {
        enterOuterAlt(_localctx, 1);
        setState(585);
        expr_complement();
        break;
      }

      case gsc_iw_grammarParser::SUB: {
        enterOuterAlt(_localctx, 2);
        setState(586);
        expr_negate();
        break;
      }

      case gsc_iw_grammarParser::MOD: {
        enterOuterAlt(_localctx, 3);
        setState(587);
        expr_animation();
        break;
      }

      case gsc_iw_grammarParser::ANIMTREE:
      case gsc_iw_grammarParser::THREAD:
      case gsc_iw_grammarParser::CHILDTHREAD:
      case gsc_iw_grammarParser::THISTHREAD:
      case gsc_iw_grammarParser::CALL:
      case gsc_iw_grammarParser::TRUE:
      case gsc_iw_grammarParser::FALSE:
      case gsc_iw_grammarParser::UNDEFINED:
      case gsc_iw_grammarParser::SIZE:
      case gsc_iw_grammarParser::GAME:
      case gsc_iw_grammarParser::SELF:
      case gsc_iw_grammarParser::ANIM:
      case gsc_iw_grammarParser::LEVEL:
      case gsc_iw_grammarParser::ISDEFINED:
      case gsc_iw_grammarParser::ISTRUE:
      case gsc_iw_grammarParser::LPAREN:
      case gsc_iw_grammarParser::LBRACKET:
      case gsc_iw_grammarParser::DOUBLECOLON:
      case gsc_iw_grammarParser::FLOAT:
      case gsc_iw_grammarParser::INTEGER:
      case gsc_iw_grammarParser::STRING:
      case gsc_iw_grammarParser::ISTRING:
      case gsc_iw_grammarParser::IDENTIFIER:
      case gsc_iw_grammarParser::PATH: {
        enterOuterAlt(_localctx, 4);
        setState(588);
        expr_primary();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_complementContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_complementContext::Expr_complementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_complementContext::COMPLEMENT() {
  return getToken(gsc_iw_grammarParser::COMPLEMENT, 0);
}

gsc_iw_grammarParser::Expr_unaryContext* gsc_iw_grammarParser::Expr_complementContext::expr_unary() {
  return getRuleContext<gsc_iw_grammarParser::Expr_unaryContext>(0);
}


size_t gsc_iw_grammarParser::Expr_complementContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_complement;
}

void gsc_iw_grammarParser::Expr_complementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_complement(this);
}

void gsc_iw_grammarParser::Expr_complementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_complement(this);
}

gsc_iw_grammarParser::Expr_complementContext* gsc_iw_grammarParser::expr_complement() {
  Expr_complementContext *_localctx = _tracker.createInstance<Expr_complementContext>(_ctx, getState());
  enterRule(_localctx, 102, gsc_iw_grammarParser::RuleExpr_complement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(591);
    match(gsc_iw_grammarParser::COMPLEMENT);
    setState(592);
    expr_unary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_negateContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_negateContext::Expr_negateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_negateContext::SUB() {
  return getToken(gsc_iw_grammarParser::SUB, 0);
}

gsc_iw_grammarParser::Expr_floatContext* gsc_iw_grammarParser::Expr_negateContext::expr_float() {
  return getRuleContext<gsc_iw_grammarParser::Expr_floatContext>(0);
}

gsc_iw_grammarParser::Expr_integerContext* gsc_iw_grammarParser::Expr_negateContext::expr_integer() {
  return getRuleContext<gsc_iw_grammarParser::Expr_integerContext>(0);
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Expr_negateContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

gsc_iw_grammarParser::Expr_parenContext* gsc_iw_grammarParser::Expr_negateContext::expr_paren() {
  return getRuleContext<gsc_iw_grammarParser::Expr_parenContext>(0);
}

gsc_iw_grammarParser::Expr_object_subexprContext* gsc_iw_grammarParser::Expr_negateContext::expr_object_subexpr() {
  return getRuleContext<gsc_iw_grammarParser::Expr_object_subexprContext>(0);
}


size_t gsc_iw_grammarParser::Expr_negateContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_negate;
}

void gsc_iw_grammarParser::Expr_negateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_negate(this);
}

void gsc_iw_grammarParser::Expr_negateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_negate(this);
}

gsc_iw_grammarParser::Expr_negateContext* gsc_iw_grammarParser::expr_negate() {
  Expr_negateContext *_localctx = _tracker.createInstance<Expr_negateContext>(_ctx, getState());
  enterRule(_localctx, 104, gsc_iw_grammarParser::RuleExpr_negate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(594);
    match(gsc_iw_grammarParser::SUB);
    setState(600);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(595);
      expr_float();
      break;
    }

    case 2: {
      setState(596);
      expr_integer();
      break;
    }

    case 3: {
      setState(597);
      expr_identifier();
      break;
    }

    case 4: {
      setState(598);
      expr_paren();
      break;
    }

    case 5: {
      setState(599);
      expr_object_subexpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_animationContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_animationContext::Expr_animationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_animationContext::MOD() {
  return getToken(gsc_iw_grammarParser::MOD, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_animationContext::IDENTIFIER() {
  return getToken(gsc_iw_grammarParser::IDENTIFIER, 0);
}


size_t gsc_iw_grammarParser::Expr_animationContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_animation;
}

void gsc_iw_grammarParser::Expr_animationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_animation(this);
}

void gsc_iw_grammarParser::Expr_animationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_animation(this);
}

gsc_iw_grammarParser::Expr_animationContext* gsc_iw_grammarParser::expr_animation() {
  Expr_animationContext *_localctx = _tracker.createInstance<Expr_animationContext>(_ctx, getState());
  enterRule(_localctx, 106, gsc_iw_grammarParser::RuleExpr_animation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    match(gsc_iw_grammarParser::MOD);
    setState(603);
    match(gsc_iw_grammarParser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_primaryContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_primaryContext::Expr_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_callContext* gsc_iw_grammarParser::Expr_primaryContext::expr_call() {
  return getRuleContext<gsc_iw_grammarParser::Expr_callContext>(0);
}

gsc_iw_grammarParser::Expr_referenceContext* gsc_iw_grammarParser::Expr_primaryContext::expr_reference() {
  return getRuleContext<gsc_iw_grammarParser::Expr_referenceContext>(0);
}

gsc_iw_grammarParser::Expr_isdefinedContext* gsc_iw_grammarParser::Expr_primaryContext::expr_isdefined() {
  return getRuleContext<gsc_iw_grammarParser::Expr_isdefinedContext>(0);
}

gsc_iw_grammarParser::Expr_istrueContext* gsc_iw_grammarParser::Expr_primaryContext::expr_istrue() {
  return getRuleContext<gsc_iw_grammarParser::Expr_istrueContext>(0);
}

gsc_iw_grammarParser::Expr_add_arrayContext* gsc_iw_grammarParser::Expr_primaryContext::expr_add_array() {
  return getRuleContext<gsc_iw_grammarParser::Expr_add_arrayContext>(0);
}

gsc_iw_grammarParser::Expr_object_subexprContext* gsc_iw_grammarParser::Expr_primaryContext::expr_object_subexpr() {
  return getRuleContext<gsc_iw_grammarParser::Expr_object_subexprContext>(0);
}

gsc_iw_grammarParser::Expr_sizeContext* gsc_iw_grammarParser::Expr_primaryContext::expr_size() {
  return getRuleContext<gsc_iw_grammarParser::Expr_sizeContext>(0);
}

gsc_iw_grammarParser::Expr_parenContext* gsc_iw_grammarParser::Expr_primaryContext::expr_paren() {
  return getRuleContext<gsc_iw_grammarParser::Expr_parenContext>(0);
}

gsc_iw_grammarParser::Expr_thisthreadContext* gsc_iw_grammarParser::Expr_primaryContext::expr_thisthread() {
  return getRuleContext<gsc_iw_grammarParser::Expr_thisthreadContext>(0);
}

gsc_iw_grammarParser::Expr_empty_arrayContext* gsc_iw_grammarParser::Expr_primaryContext::expr_empty_array() {
  return getRuleContext<gsc_iw_grammarParser::Expr_empty_arrayContext>(0);
}

gsc_iw_grammarParser::Expr_undefinedContext* gsc_iw_grammarParser::Expr_primaryContext::expr_undefined() {
  return getRuleContext<gsc_iw_grammarParser::Expr_undefinedContext>(0);
}

gsc_iw_grammarParser::Expr_gameContext* gsc_iw_grammarParser::Expr_primaryContext::expr_game() {
  return getRuleContext<gsc_iw_grammarParser::Expr_gameContext>(0);
}

gsc_iw_grammarParser::Expr_selfContext* gsc_iw_grammarParser::Expr_primaryContext::expr_self() {
  return getRuleContext<gsc_iw_grammarParser::Expr_selfContext>(0);
}

gsc_iw_grammarParser::Expr_animContext* gsc_iw_grammarParser::Expr_primaryContext::expr_anim() {
  return getRuleContext<gsc_iw_grammarParser::Expr_animContext>(0);
}

gsc_iw_grammarParser::Expr_levelContext* gsc_iw_grammarParser::Expr_primaryContext::expr_level() {
  return getRuleContext<gsc_iw_grammarParser::Expr_levelContext>(0);
}

gsc_iw_grammarParser::Expr_animtreeContext* gsc_iw_grammarParser::Expr_primaryContext::expr_animtree() {
  return getRuleContext<gsc_iw_grammarParser::Expr_animtreeContext>(0);
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Expr_primaryContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

gsc_iw_grammarParser::Expr_istringContext* gsc_iw_grammarParser::Expr_primaryContext::expr_istring() {
  return getRuleContext<gsc_iw_grammarParser::Expr_istringContext>(0);
}

gsc_iw_grammarParser::Expr_stringContext* gsc_iw_grammarParser::Expr_primaryContext::expr_string() {
  return getRuleContext<gsc_iw_grammarParser::Expr_stringContext>(0);
}

gsc_iw_grammarParser::Expr_vectorContext* gsc_iw_grammarParser::Expr_primaryContext::expr_vector() {
  return getRuleContext<gsc_iw_grammarParser::Expr_vectorContext>(0);
}

gsc_iw_grammarParser::Expr_floatContext* gsc_iw_grammarParser::Expr_primaryContext::expr_float() {
  return getRuleContext<gsc_iw_grammarParser::Expr_floatContext>(0);
}

gsc_iw_grammarParser::Expr_integerContext* gsc_iw_grammarParser::Expr_primaryContext::expr_integer() {
  return getRuleContext<gsc_iw_grammarParser::Expr_integerContext>(0);
}

gsc_iw_grammarParser::Expr_falseContext* gsc_iw_grammarParser::Expr_primaryContext::expr_false() {
  return getRuleContext<gsc_iw_grammarParser::Expr_falseContext>(0);
}

gsc_iw_grammarParser::Expr_trueContext* gsc_iw_grammarParser::Expr_primaryContext::expr_true() {
  return getRuleContext<gsc_iw_grammarParser::Expr_trueContext>(0);
}


size_t gsc_iw_grammarParser::Expr_primaryContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_primary;
}

void gsc_iw_grammarParser::Expr_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_primary(this);
}

void gsc_iw_grammarParser::Expr_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_primary(this);
}

gsc_iw_grammarParser::Expr_primaryContext* gsc_iw_grammarParser::expr_primary() {
  Expr_primaryContext *_localctx = _tracker.createInstance<Expr_primaryContext>(_ctx, getState());
  enterRule(_localctx, 108, gsc_iw_grammarParser::RuleExpr_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(629);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(605);
      expr_call();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(606);
      expr_reference();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(607);
      expr_isdefined();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(608);
      expr_istrue();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(609);
      expr_add_array();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(610);
      expr_object_subexpr();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(611);
      expr_size();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(612);
      expr_paren();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(613);
      expr_thisthread();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(614);
      expr_empty_array();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(615);
      expr_undefined();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(616);
      expr_game();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(617);
      expr_self();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(618);
      expr_anim();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(619);
      expr_level();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(620);
      expr_animtree();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(621);
      expr_identifier();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(622);
      expr_istring();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(623);
      expr_string();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(624);
      expr_vector();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(625);
      expr_float();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(626);
      expr_integer();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(627);
      expr_false();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(628);
      expr_true();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_callContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_callContext::Expr_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_functionContext* gsc_iw_grammarParser::Expr_callContext::expr_function() {
  return getRuleContext<gsc_iw_grammarParser::Expr_functionContext>(0);
}

gsc_iw_grammarParser::Expr_pointerContext* gsc_iw_grammarParser::Expr_callContext::expr_pointer() {
  return getRuleContext<gsc_iw_grammarParser::Expr_pointerContext>(0);
}


size_t gsc_iw_grammarParser::Expr_callContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_call;
}

void gsc_iw_grammarParser::Expr_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_call(this);
}

void gsc_iw_grammarParser::Expr_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_call(this);
}

gsc_iw_grammarParser::Expr_callContext* gsc_iw_grammarParser::expr_call() {
  Expr_callContext *_localctx = _tracker.createInstance<Expr_callContext>(_ctx, getState());
  enterRule(_localctx, 110, gsc_iw_grammarParser::RuleExpr_call);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(633);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(631);
      expr_function();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(632);
      expr_pointer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_methodContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_methodContext::Expr_methodContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_objectContext* gsc_iw_grammarParser::Expr_methodContext::expr_object() {
  return getRuleContext<gsc_iw_grammarParser::Expr_objectContext>(0);
}

gsc_iw_grammarParser::Expr_functionContext* gsc_iw_grammarParser::Expr_methodContext::expr_function() {
  return getRuleContext<gsc_iw_grammarParser::Expr_functionContext>(0);
}

gsc_iw_grammarParser::Expr_pointerContext* gsc_iw_grammarParser::Expr_methodContext::expr_pointer() {
  return getRuleContext<gsc_iw_grammarParser::Expr_pointerContext>(0);
}


size_t gsc_iw_grammarParser::Expr_methodContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_method;
}

void gsc_iw_grammarParser::Expr_methodContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_method(this);
}

void gsc_iw_grammarParser::Expr_methodContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_method(this);
}

gsc_iw_grammarParser::Expr_methodContext* gsc_iw_grammarParser::expr_method() {
  Expr_methodContext *_localctx = _tracker.createInstance<Expr_methodContext>(_ctx, getState());
  enterRule(_localctx, 112, gsc_iw_grammarParser::RuleExpr_method);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(635);
    expr_object();
    setState(638);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      setState(636);
      expr_function();
      break;
    }

    case 2: {
      setState(637);
      expr_pointer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_functionContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_functionContext::Expr_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Expr_functionContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_functionContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_functionContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

gsc_iw_grammarParser::Expr_pathContext* gsc_iw_grammarParser::Expr_functionContext::expr_path() {
  return getRuleContext<gsc_iw_grammarParser::Expr_pathContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_functionContext::DOUBLECOLON() {
  return getToken(gsc_iw_grammarParser::DOUBLECOLON, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Expr_functionContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_functionContext::THREAD() {
  return getToken(gsc_iw_grammarParser::THREAD, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_functionContext::CHILDTHREAD() {
  return getToken(gsc_iw_grammarParser::CHILDTHREAD, 0);
}


size_t gsc_iw_grammarParser::Expr_functionContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_function;
}

void gsc_iw_grammarParser::Expr_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_function(this);
}

void gsc_iw_grammarParser::Expr_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_function(this);
}

gsc_iw_grammarParser::Expr_functionContext* gsc_iw_grammarParser::expr_function() {
  Expr_functionContext *_localctx = _tracker.createInstance<Expr_functionContext>(_ctx, getState());
  enterRule(_localctx, 114, gsc_iw_grammarParser::RuleExpr_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(641);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::THREAD

    || _la == gsc_iw_grammarParser::CHILDTHREAD) {
      setState(640);
      _la = _input->LA(1);
      if (!(_la == gsc_iw_grammarParser::THREAD

      || _la == gsc_iw_grammarParser::CHILDTHREAD)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(646);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(643);
      expr_path();
      setState(644);
      match(gsc_iw_grammarParser::DOUBLECOLON);
      break;
    }

    default:
      break;
    }
    setState(648);
    expr_identifier();
    setState(649);
    match(gsc_iw_grammarParser::LPAREN);
    setState(651);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 293296908552634496) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 116981761) != 0)) {
      setState(650);
      expr_arguments();
    }
    setState(653);
    match(gsc_iw_grammarParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_pointerContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_pointerContext::Expr_pointerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_pointerContext::LBRACKET() {
  return getTokens(gsc_iw_grammarParser::LBRACKET);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_pointerContext::LBRACKET(size_t i) {
  return getToken(gsc_iw_grammarParser::LBRACKET, i);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_pointerContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_pointerContext::RBRACKET() {
  return getTokens(gsc_iw_grammarParser::RBRACKET);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_pointerContext::RBRACKET(size_t i) {
  return getToken(gsc_iw_grammarParser::RBRACKET, i);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_pointerContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_pointerContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Expr_pointerContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_pointerContext::THREAD() {
  return getToken(gsc_iw_grammarParser::THREAD, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_pointerContext::CHILDTHREAD() {
  return getToken(gsc_iw_grammarParser::CHILDTHREAD, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_pointerContext::CALL() {
  return getToken(gsc_iw_grammarParser::CALL, 0);
}


size_t gsc_iw_grammarParser::Expr_pointerContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_pointer;
}

void gsc_iw_grammarParser::Expr_pointerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_pointer(this);
}

void gsc_iw_grammarParser::Expr_pointerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_pointer(this);
}

gsc_iw_grammarParser::Expr_pointerContext* gsc_iw_grammarParser::expr_pointer() {
  Expr_pointerContext *_localctx = _tracker.createInstance<Expr_pointerContext>(_ctx, getState());
  enterRule(_localctx, 116, gsc_iw_grammarParser::RuleExpr_pointer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(656);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 188978561024) != 0)) {
      setState(655);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 188978561024) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(658);
    match(gsc_iw_grammarParser::LBRACKET);
    setState(659);
    match(gsc_iw_grammarParser::LBRACKET);
    setState(660);
    expr();
    setState(661);
    match(gsc_iw_grammarParser::RBRACKET);
    setState(662);
    match(gsc_iw_grammarParser::RBRACKET);
    setState(663);
    match(gsc_iw_grammarParser::LPAREN);
    setState(665);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 293296908552634496) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 116981761) != 0)) {
      setState(664);
      expr_arguments();
    }
    setState(667);
    match(gsc_iw_grammarParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_isdefinedContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_isdefinedContext::Expr_isdefinedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_isdefinedContext::ISDEFINED() {
  return getToken(gsc_iw_grammarParser::ISDEFINED, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_isdefinedContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_isdefinedContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_isdefinedContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}


size_t gsc_iw_grammarParser::Expr_isdefinedContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_isdefined;
}

void gsc_iw_grammarParser::Expr_isdefinedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_isdefined(this);
}

void gsc_iw_grammarParser::Expr_isdefinedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_isdefined(this);
}

gsc_iw_grammarParser::Expr_isdefinedContext* gsc_iw_grammarParser::expr_isdefined() {
  Expr_isdefinedContext *_localctx = _tracker.createInstance<Expr_isdefinedContext>(_ctx, getState());
  enterRule(_localctx, 118, gsc_iw_grammarParser::RuleExpr_isdefined);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(669);
    match(gsc_iw_grammarParser::ISDEFINED);
    setState(670);
    match(gsc_iw_grammarParser::LPAREN);
    setState(671);
    expr();
    setState(672);
    match(gsc_iw_grammarParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_istrueContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_istrueContext::Expr_istrueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_istrueContext::ISTRUE() {
  return getToken(gsc_iw_grammarParser::ISTRUE, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_istrueContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_istrueContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_istrueContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}


size_t gsc_iw_grammarParser::Expr_istrueContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_istrue;
}

void gsc_iw_grammarParser::Expr_istrueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_istrue(this);
}

void gsc_iw_grammarParser::Expr_istrueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_istrue(this);
}

gsc_iw_grammarParser::Expr_istrueContext* gsc_iw_grammarParser::expr_istrue() {
  Expr_istrueContext *_localctx = _tracker.createInstance<Expr_istrueContext>(_ctx, getState());
  enterRule(_localctx, 120, gsc_iw_grammarParser::RuleExpr_istrue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(674);
    match(gsc_iw_grammarParser::ISTRUE);
    setState(675);
    match(gsc_iw_grammarParser::LPAREN);
    setState(676);
    expr();
    setState(677);
    match(gsc_iw_grammarParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_referenceContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_referenceContext::Expr_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_referenceContext::DOUBLECOLON() {
  return getToken(gsc_iw_grammarParser::DOUBLECOLON, 0);
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Expr_referenceContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

gsc_iw_grammarParser::Expr_pathContext* gsc_iw_grammarParser::Expr_referenceContext::expr_path() {
  return getRuleContext<gsc_iw_grammarParser::Expr_pathContext>(0);
}


size_t gsc_iw_grammarParser::Expr_referenceContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_reference;
}

void gsc_iw_grammarParser::Expr_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_reference(this);
}

void gsc_iw_grammarParser::Expr_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_reference(this);
}

gsc_iw_grammarParser::Expr_referenceContext* gsc_iw_grammarParser::expr_reference() {
  Expr_referenceContext *_localctx = _tracker.createInstance<Expr_referenceContext>(_ctx, getState());
  enterRule(_localctx, 122, gsc_iw_grammarParser::RuleExpr_reference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(680);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == gsc_iw_grammarParser::IDENTIFIER

    || _la == gsc_iw_grammarParser::PATH) {
      setState(679);
      expr_path();
    }
    setState(682);
    match(gsc_iw_grammarParser::DOUBLECOLON);
    setState(683);
    expr_identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_parametersContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_parametersContext::Expr_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::Expr_identifierContext *> gsc_iw_grammarParser::Expr_parametersContext::expr_identifier() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_identifierContext>();
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Expr_parametersContext::expr_identifier(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_parametersContext::COMMA() {
  return getTokens(gsc_iw_grammarParser::COMMA);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_parametersContext::COMMA(size_t i) {
  return getToken(gsc_iw_grammarParser::COMMA, i);
}


size_t gsc_iw_grammarParser::Expr_parametersContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_parameters;
}

void gsc_iw_grammarParser::Expr_parametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_parameters(this);
}

void gsc_iw_grammarParser::Expr_parametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_parameters(this);
}

gsc_iw_grammarParser::Expr_parametersContext* gsc_iw_grammarParser::expr_parameters() {
  Expr_parametersContext *_localctx = _tracker.createInstance<Expr_parametersContext>(_ctx, getState());
  enterRule(_localctx, 124, gsc_iw_grammarParser::RuleExpr_parameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(685);
    expr_identifier();
    setState(690);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::COMMA) {
      setState(686);
      match(gsc_iw_grammarParser::COMMA);
      setState(687);
      expr_identifier();
      setState(692);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_argumentsContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_argumentsContext::Expr_argumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<gsc_iw_grammarParser::ExprContext *> gsc_iw_grammarParser::Expr_argumentsContext::expr() {
  return getRuleContexts<gsc_iw_grammarParser::ExprContext>();
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_argumentsContext::expr(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_argumentsContext::COMMA() {
  return getTokens(gsc_iw_grammarParser::COMMA);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_argumentsContext::COMMA(size_t i) {
  return getToken(gsc_iw_grammarParser::COMMA, i);
}


size_t gsc_iw_grammarParser::Expr_argumentsContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_arguments;
}

void gsc_iw_grammarParser::Expr_argumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_arguments(this);
}

void gsc_iw_grammarParser::Expr_argumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_arguments(this);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::expr_arguments() {
  Expr_argumentsContext *_localctx = _tracker.createInstance<Expr_argumentsContext>(_ctx, getState());
  enterRule(_localctx, 126, gsc_iw_grammarParser::RuleExpr_arguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(693);
    expr();
    setState(698);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::COMMA) {
      setState(694);
      match(gsc_iw_grammarParser::COMMA);
      setState(695);
      expr();
      setState(700);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_tupleContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_tupleContext::Expr_tupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_tupleContext::LBRACKET() {
  return getToken(gsc_iw_grammarParser::LBRACKET, 0);
}

std::vector<gsc_iw_grammarParser::Expr_lvalueContext *> gsc_iw_grammarParser::Expr_tupleContext::expr_lvalue() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_lvalueContext>();
}

gsc_iw_grammarParser::Expr_lvalueContext* gsc_iw_grammarParser::Expr_tupleContext::expr_lvalue(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_lvalueContext>(i);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_tupleContext::RBRACKET() {
  return getToken(gsc_iw_grammarParser::RBRACKET, 0);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_tupleContext::COMMA() {
  return getTokens(gsc_iw_grammarParser::COMMA);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_tupleContext::COMMA(size_t i) {
  return getToken(gsc_iw_grammarParser::COMMA, i);
}


size_t gsc_iw_grammarParser::Expr_tupleContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_tuple;
}

void gsc_iw_grammarParser::Expr_tupleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_tuple(this);
}

void gsc_iw_grammarParser::Expr_tupleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_tuple(this);
}

gsc_iw_grammarParser::Expr_tupleContext* gsc_iw_grammarParser::expr_tuple() {
  Expr_tupleContext *_localctx = _tracker.createInstance<Expr_tupleContext>(_ctx, getState());
  enterRule(_localctx, 128, gsc_iw_grammarParser::RuleExpr_tuple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(701);
    match(gsc_iw_grammarParser::LBRACKET);
    setState(702);
    expr_lvalue();
    setState(707);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == gsc_iw_grammarParser::COMMA) {
      setState(703);
      match(gsc_iw_grammarParser::COMMA);
      setState(704);
      expr_lvalue();
      setState(709);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(710);
    match(gsc_iw_grammarParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_add_arrayContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_add_arrayContext::Expr_add_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_add_arrayContext::LBRACKET() {
  return getToken(gsc_iw_grammarParser::LBRACKET, 0);
}

gsc_iw_grammarParser::Expr_argumentsContext* gsc_iw_grammarParser::Expr_add_arrayContext::expr_arguments() {
  return getRuleContext<gsc_iw_grammarParser::Expr_argumentsContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_add_arrayContext::RBRACKET() {
  return getToken(gsc_iw_grammarParser::RBRACKET, 0);
}


size_t gsc_iw_grammarParser::Expr_add_arrayContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_add_array;
}

void gsc_iw_grammarParser::Expr_add_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_add_array(this);
}

void gsc_iw_grammarParser::Expr_add_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_add_array(this);
}

gsc_iw_grammarParser::Expr_add_arrayContext* gsc_iw_grammarParser::expr_add_array() {
  Expr_add_arrayContext *_localctx = _tracker.createInstance<Expr_add_arrayContext>(_ctx, getState());
  enterRule(_localctx, 130, gsc_iw_grammarParser::RuleExpr_add_array);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(712);
    match(gsc_iw_grammarParser::LBRACKET);
    setState(713);
    expr_arguments();
    setState(714);
    match(gsc_iw_grammarParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_parenContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_parenContext::Expr_parenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_parenContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_parenContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_parenContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}


size_t gsc_iw_grammarParser::Expr_parenContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_paren;
}

void gsc_iw_grammarParser::Expr_parenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_paren(this);
}

void gsc_iw_grammarParser::Expr_parenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_paren(this);
}

gsc_iw_grammarParser::Expr_parenContext* gsc_iw_grammarParser::expr_paren() {
  Expr_parenContext *_localctx = _tracker.createInstance<Expr_parenContext>(_ctx, getState());
  enterRule(_localctx, 132, gsc_iw_grammarParser::RuleExpr_paren);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(716);
    match(gsc_iw_grammarParser::LPAREN);
    setState(717);
    expr();
    setState(718);
    match(gsc_iw_grammarParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_lvalueContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_lvalueContext::Expr_lvalueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Expr_lvalueContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

gsc_iw_grammarParser::Expr_lvalue_arrayContext* gsc_iw_grammarParser::Expr_lvalueContext::expr_lvalue_array() {
  return getRuleContext<gsc_iw_grammarParser::Expr_lvalue_arrayContext>(0);
}

gsc_iw_grammarParser::Expr_lvalue_fieldContext* gsc_iw_grammarParser::Expr_lvalueContext::expr_lvalue_field() {
  return getRuleContext<gsc_iw_grammarParser::Expr_lvalue_fieldContext>(0);
}


size_t gsc_iw_grammarParser::Expr_lvalueContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_lvalue;
}

void gsc_iw_grammarParser::Expr_lvalueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_lvalue(this);
}

void gsc_iw_grammarParser::Expr_lvalueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_lvalue(this);
}

gsc_iw_grammarParser::Expr_lvalueContext* gsc_iw_grammarParser::expr_lvalue() {
  Expr_lvalueContext *_localctx = _tracker.createInstance<Expr_lvalueContext>(_ctx, getState());
  enterRule(_localctx, 134, gsc_iw_grammarParser::RuleExpr_lvalue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(723);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(720);
      expr_identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(721);
      expr_lvalue_array();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(722);
      expr_lvalue_field();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_lvalue_arrayContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_lvalue_arrayContext::Expr_lvalue_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_object_subexpr_no_callContext* gsc_iw_grammarParser::Expr_lvalue_arrayContext::expr_object_subexpr_no_call() {
  return getRuleContext<gsc_iw_grammarParser::Expr_object_subexpr_no_callContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_lvalue_arrayContext::LBRACKET() {
  return getToken(gsc_iw_grammarParser::LBRACKET, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_lvalue_arrayContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_lvalue_arrayContext::RBRACKET() {
  return getToken(gsc_iw_grammarParser::RBRACKET, 0);
}


size_t gsc_iw_grammarParser::Expr_lvalue_arrayContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_lvalue_array;
}

void gsc_iw_grammarParser::Expr_lvalue_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_lvalue_array(this);
}

void gsc_iw_grammarParser::Expr_lvalue_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_lvalue_array(this);
}

gsc_iw_grammarParser::Expr_lvalue_arrayContext* gsc_iw_grammarParser::expr_lvalue_array() {
  Expr_lvalue_arrayContext *_localctx = _tracker.createInstance<Expr_lvalue_arrayContext>(_ctx, getState());
  enterRule(_localctx, 136, gsc_iw_grammarParser::RuleExpr_lvalue_array);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(725);
    expr_object_subexpr_no_call();
    setState(726);
    match(gsc_iw_grammarParser::LBRACKET);
    setState(727);
    expr();
    setState(728);
    match(gsc_iw_grammarParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_lvalue_fieldContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_lvalue_fieldContext::Expr_lvalue_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_object_subexprContext* gsc_iw_grammarParser::Expr_lvalue_fieldContext::expr_object_subexpr() {
  return getRuleContext<gsc_iw_grammarParser::Expr_object_subexprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_lvalue_fieldContext::DOT() {
  return getToken(gsc_iw_grammarParser::DOT, 0);
}

gsc_iw_grammarParser::Expr_identifier_fieldContext* gsc_iw_grammarParser::Expr_lvalue_fieldContext::expr_identifier_field() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifier_fieldContext>(0);
}


size_t gsc_iw_grammarParser::Expr_lvalue_fieldContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_lvalue_field;
}

void gsc_iw_grammarParser::Expr_lvalue_fieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_lvalue_field(this);
}

void gsc_iw_grammarParser::Expr_lvalue_fieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_lvalue_field(this);
}

gsc_iw_grammarParser::Expr_lvalue_fieldContext* gsc_iw_grammarParser::expr_lvalue_field() {
  Expr_lvalue_fieldContext *_localctx = _tracker.createInstance<Expr_lvalue_fieldContext>(_ctx, getState());
  enterRule(_localctx, 138, gsc_iw_grammarParser::RuleExpr_lvalue_field);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(730);
    expr_object_subexpr();
    setState(731);
    match(gsc_iw_grammarParser::DOT);
    setState(732);
    expr_identifier_field();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_objectContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_objectContext::Expr_objectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_callContext* gsc_iw_grammarParser::Expr_objectContext::expr_call() {
  return getRuleContext<gsc_iw_grammarParser::Expr_callContext>(0);
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Expr_objectContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

gsc_iw_grammarParser::Expr_gameContext* gsc_iw_grammarParser::Expr_objectContext::expr_game() {
  return getRuleContext<gsc_iw_grammarParser::Expr_gameContext>(0);
}

gsc_iw_grammarParser::Expr_selfContext* gsc_iw_grammarParser::Expr_objectContext::expr_self() {
  return getRuleContext<gsc_iw_grammarParser::Expr_selfContext>(0);
}

gsc_iw_grammarParser::Expr_animContext* gsc_iw_grammarParser::Expr_objectContext::expr_anim() {
  return getRuleContext<gsc_iw_grammarParser::Expr_animContext>(0);
}

gsc_iw_grammarParser::Expr_levelContext* gsc_iw_grammarParser::Expr_objectContext::expr_level() {
  return getRuleContext<gsc_iw_grammarParser::Expr_levelContext>(0);
}

gsc_iw_grammarParser::Expr_object_subexprContext* gsc_iw_grammarParser::Expr_objectContext::expr_object_subexpr() {
  return getRuleContext<gsc_iw_grammarParser::Expr_object_subexprContext>(0);
}


size_t gsc_iw_grammarParser::Expr_objectContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_object;
}

void gsc_iw_grammarParser::Expr_objectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_object(this);
}

void gsc_iw_grammarParser::Expr_objectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_object(this);
}

gsc_iw_grammarParser::Expr_objectContext* gsc_iw_grammarParser::expr_object() {
  Expr_objectContext *_localctx = _tracker.createInstance<Expr_objectContext>(_ctx, getState());
  enterRule(_localctx, 140, gsc_iw_grammarParser::RuleExpr_object);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(741);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(734);
      expr_call();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(735);
      expr_identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(736);
      expr_game();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(737);
      expr_self();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(738);
      expr_anim();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(739);
      expr_level();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(740);
      expr_object_subexpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_object_subexprContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_object_subexprContext::Expr_object_subexprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_callContext* gsc_iw_grammarParser::Expr_object_subexprContext::expr_call() {
  return getRuleContext<gsc_iw_grammarParser::Expr_callContext>(0);
}

std::vector<gsc_iw_grammarParser::Expr_array_or_field_or_callContext *> gsc_iw_grammarParser::Expr_object_subexprContext::expr_array_or_field_or_call() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_array_or_field_or_callContext>();
}

gsc_iw_grammarParser::Expr_array_or_field_or_callContext* gsc_iw_grammarParser::Expr_object_subexprContext::expr_array_or_field_or_call(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_array_or_field_or_callContext>(i);
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Expr_object_subexprContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

gsc_iw_grammarParser::Expr_gameContext* gsc_iw_grammarParser::Expr_object_subexprContext::expr_game() {
  return getRuleContext<gsc_iw_grammarParser::Expr_gameContext>(0);
}

std::vector<gsc_iw_grammarParser::Expr_arrayContext *> gsc_iw_grammarParser::Expr_object_subexprContext::expr_array() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_arrayContext>();
}

gsc_iw_grammarParser::Expr_arrayContext* gsc_iw_grammarParser::Expr_object_subexprContext::expr_array(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_arrayContext>(i);
}

gsc_iw_grammarParser::Expr_selfContext* gsc_iw_grammarParser::Expr_object_subexprContext::expr_self() {
  return getRuleContext<gsc_iw_grammarParser::Expr_selfContext>(0);
}

gsc_iw_grammarParser::Expr_animContext* gsc_iw_grammarParser::Expr_object_subexprContext::expr_anim() {
  return getRuleContext<gsc_iw_grammarParser::Expr_animContext>(0);
}

std::vector<gsc_iw_grammarParser::Expr_fieldContext *> gsc_iw_grammarParser::Expr_object_subexprContext::expr_field() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_fieldContext>();
}

gsc_iw_grammarParser::Expr_fieldContext* gsc_iw_grammarParser::Expr_object_subexprContext::expr_field(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_fieldContext>(i);
}

gsc_iw_grammarParser::Expr_levelContext* gsc_iw_grammarParser::Expr_object_subexprContext::expr_level() {
  return getRuleContext<gsc_iw_grammarParser::Expr_levelContext>(0);
}


size_t gsc_iw_grammarParser::Expr_object_subexprContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_object_subexpr;
}

void gsc_iw_grammarParser::Expr_object_subexprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_object_subexpr(this);
}

void gsc_iw_grammarParser::Expr_object_subexprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_object_subexpr(this);
}

gsc_iw_grammarParser::Expr_object_subexprContext* gsc_iw_grammarParser::expr_object_subexpr() {
  Expr_object_subexprContext *_localctx = _tracker.createInstance<Expr_object_subexprContext>(_ctx, getState());
  enterRule(_localctx, 142, gsc_iw_grammarParser::RuleExpr_object_subexpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(799);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(743);
      expr_call();
      setState(747);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(744);
          expr_array_or_field_or_call(); 
        }
        setState(749);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(750);
      expr_identifier();
      setState(754);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(751);
          expr_array_or_field_or_call(); 
        }
        setState(756);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(757);
      expr_game();
      setState(759); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(758);
                expr_array();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(761); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(766);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(763);
          expr_array_or_field_or_call(); 
        }
        setState(768);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(769);
      expr_self();
      setState(771); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(770);
                expr_array_or_field_or_call();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(773); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(775);
      expr_anim();
      setState(777); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(776);
                expr_field();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(779); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(784);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(781);
          expr_array_or_field_or_call(); 
        }
        setState(786);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(787);
      expr_level();
      setState(789); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(788);
                expr_field();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(791); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(796);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(793);
          expr_array_or_field_or_call(); 
        }
        setState(798);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_object_subexpr_no_callContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::Expr_object_subexpr_no_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_identifier() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifierContext>(0);
}

std::vector<gsc_iw_grammarParser::Expr_array_or_fieldContext *> gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_array_or_field() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_array_or_fieldContext>();
}

gsc_iw_grammarParser::Expr_array_or_fieldContext* gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_array_or_field(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_array_or_fieldContext>(i);
}

gsc_iw_grammarParser::Expr_gameContext* gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_game() {
  return getRuleContext<gsc_iw_grammarParser::Expr_gameContext>(0);
}

std::vector<gsc_iw_grammarParser::Expr_arrayContext *> gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_array() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_arrayContext>();
}

gsc_iw_grammarParser::Expr_arrayContext* gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_array(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_arrayContext>(i);
}

gsc_iw_grammarParser::Expr_selfContext* gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_self() {
  return getRuleContext<gsc_iw_grammarParser::Expr_selfContext>(0);
}

gsc_iw_grammarParser::Expr_animContext* gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_anim() {
  return getRuleContext<gsc_iw_grammarParser::Expr_animContext>(0);
}

std::vector<gsc_iw_grammarParser::Expr_fieldContext *> gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_field() {
  return getRuleContexts<gsc_iw_grammarParser::Expr_fieldContext>();
}

gsc_iw_grammarParser::Expr_fieldContext* gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_field(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::Expr_fieldContext>(i);
}

gsc_iw_grammarParser::Expr_levelContext* gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::expr_level() {
  return getRuleContext<gsc_iw_grammarParser::Expr_levelContext>(0);
}


size_t gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_object_subexpr_no_call;
}

void gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_object_subexpr_no_call(this);
}

void gsc_iw_grammarParser::Expr_object_subexpr_no_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_object_subexpr_no_call(this);
}

gsc_iw_grammarParser::Expr_object_subexpr_no_callContext* gsc_iw_grammarParser::expr_object_subexpr_no_call() {
  Expr_object_subexpr_no_callContext *_localctx = _tracker.createInstance<Expr_object_subexpr_no_callContext>(_ctx, getState());
  enterRule(_localctx, 144, gsc_iw_grammarParser::RuleExpr_object_subexpr_no_call);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(850);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case gsc_iw_grammarParser::SIZE:
      case gsc_iw_grammarParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(801);
        expr_identifier();
        setState(805);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(802);
            expr_array_or_field(); 
          }
          setState(807);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
        }
        break;
      }

      case gsc_iw_grammarParser::GAME: {
        enterOuterAlt(_localctx, 2);
        setState(808);
        expr_game();
        setState(810); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(809);
                  expr_array();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(812); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(817);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(814);
            expr_array_or_field(); 
          }
          setState(819);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
        }
        break;
      }

      case gsc_iw_grammarParser::SELF: {
        enterOuterAlt(_localctx, 3);
        setState(820);
        expr_self();
        setState(822); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(821);
                  expr_array_or_field();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(824); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

      case gsc_iw_grammarParser::ANIM: {
        enterOuterAlt(_localctx, 4);
        setState(826);
        expr_anim();
        setState(828); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(827);
                  expr_field();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(830); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(835);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(832);
            expr_array_or_field(); 
          }
          setState(837);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
        }
        break;
      }

      case gsc_iw_grammarParser::LEVEL: {
        enterOuterAlt(_localctx, 5);
        setState(838);
        expr_level();
        setState(840); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(839);
                  expr_field();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(842); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(847);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(844);
            expr_array_or_field(); 
          }
          setState(849);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_array_or_field_or_callContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_array_or_field_or_callContext::Expr_array_or_field_or_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_array_or_field_or_callContext::LBRACKET() {
  return getToken(gsc_iw_grammarParser::LBRACKET, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_array_or_field_or_callContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_array_or_field_or_callContext::RBRACKET() {
  return getToken(gsc_iw_grammarParser::RBRACKET, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_array_or_field_or_callContext::DOT() {
  return getToken(gsc_iw_grammarParser::DOT, 0);
}

gsc_iw_grammarParser::Expr_identifier_fieldContext* gsc_iw_grammarParser::Expr_array_or_field_or_callContext::expr_identifier_field() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifier_fieldContext>(0);
}

gsc_iw_grammarParser::Expr_callContext* gsc_iw_grammarParser::Expr_array_or_field_or_callContext::expr_call() {
  return getRuleContext<gsc_iw_grammarParser::Expr_callContext>(0);
}


size_t gsc_iw_grammarParser::Expr_array_or_field_or_callContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_array_or_field_or_call;
}

void gsc_iw_grammarParser::Expr_array_or_field_or_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_array_or_field_or_call(this);
}

void gsc_iw_grammarParser::Expr_array_or_field_or_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_array_or_field_or_call(this);
}

gsc_iw_grammarParser::Expr_array_or_field_or_callContext* gsc_iw_grammarParser::expr_array_or_field_or_call() {
  Expr_array_or_field_or_callContext *_localctx = _tracker.createInstance<Expr_array_or_field_or_callContext>(_ctx, getState());
  enterRule(_localctx, 146, gsc_iw_grammarParser::RuleExpr_array_or_field_or_call);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(859);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(852);
      match(gsc_iw_grammarParser::LBRACKET);
      setState(853);
      expr();
      setState(854);
      match(gsc_iw_grammarParser::RBRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(856);
      match(gsc_iw_grammarParser::DOT);
      setState(857);
      expr_identifier_field();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(858);
      expr_call();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_array_or_fieldContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_array_or_fieldContext::Expr_array_or_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_array_or_fieldContext::LBRACKET() {
  return getToken(gsc_iw_grammarParser::LBRACKET, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_array_or_fieldContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_array_or_fieldContext::RBRACKET() {
  return getToken(gsc_iw_grammarParser::RBRACKET, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_array_or_fieldContext::DOT() {
  return getToken(gsc_iw_grammarParser::DOT, 0);
}

gsc_iw_grammarParser::Expr_identifier_fieldContext* gsc_iw_grammarParser::Expr_array_or_fieldContext::expr_identifier_field() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifier_fieldContext>(0);
}


size_t gsc_iw_grammarParser::Expr_array_or_fieldContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_array_or_field;
}

void gsc_iw_grammarParser::Expr_array_or_fieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_array_or_field(this);
}

void gsc_iw_grammarParser::Expr_array_or_fieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_array_or_field(this);
}

gsc_iw_grammarParser::Expr_array_or_fieldContext* gsc_iw_grammarParser::expr_array_or_field() {
  Expr_array_or_fieldContext *_localctx = _tracker.createInstance<Expr_array_or_fieldContext>(_ctx, getState());
  enterRule(_localctx, 148, gsc_iw_grammarParser::RuleExpr_array_or_field);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(867);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case gsc_iw_grammarParser::LBRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(861);
        match(gsc_iw_grammarParser::LBRACKET);
        setState(862);
        expr();
        setState(863);
        match(gsc_iw_grammarParser::RBRACKET);
        break;
      }

      case gsc_iw_grammarParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(865);
        match(gsc_iw_grammarParser::DOT);
        setState(866);
        expr_identifier_field();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_arrayContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_arrayContext::Expr_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_arrayContext::LBRACKET() {
  return getToken(gsc_iw_grammarParser::LBRACKET, 0);
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_arrayContext::expr() {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_arrayContext::RBRACKET() {
  return getToken(gsc_iw_grammarParser::RBRACKET, 0);
}


size_t gsc_iw_grammarParser::Expr_arrayContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_array;
}

void gsc_iw_grammarParser::Expr_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_array(this);
}

void gsc_iw_grammarParser::Expr_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_array(this);
}

gsc_iw_grammarParser::Expr_arrayContext* gsc_iw_grammarParser::expr_array() {
  Expr_arrayContext *_localctx = _tracker.createInstance<Expr_arrayContext>(_ctx, getState());
  enterRule(_localctx, 150, gsc_iw_grammarParser::RuleExpr_array);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(869);
    match(gsc_iw_grammarParser::LBRACKET);
    setState(870);
    expr();
    setState(871);
    match(gsc_iw_grammarParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_fieldContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_fieldContext::Expr_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_fieldContext::DOT() {
  return getToken(gsc_iw_grammarParser::DOT, 0);
}

gsc_iw_grammarParser::Expr_identifier_fieldContext* gsc_iw_grammarParser::Expr_fieldContext::expr_identifier_field() {
  return getRuleContext<gsc_iw_grammarParser::Expr_identifier_fieldContext>(0);
}


size_t gsc_iw_grammarParser::Expr_fieldContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_field;
}

void gsc_iw_grammarParser::Expr_fieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_field(this);
}

void gsc_iw_grammarParser::Expr_fieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_field(this);
}

gsc_iw_grammarParser::Expr_fieldContext* gsc_iw_grammarParser::expr_field() {
  Expr_fieldContext *_localctx = _tracker.createInstance<Expr_fieldContext>(_ctx, getState());
  enterRule(_localctx, 152, gsc_iw_grammarParser::RuleExpr_field);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(873);
    match(gsc_iw_grammarParser::DOT);
    setState(874);
    expr_identifier_field();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_sizeContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_sizeContext::Expr_sizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_sizeContext::DOT() {
  return getToken(gsc_iw_grammarParser::DOT, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_sizeContext::SIZE() {
  return getToken(gsc_iw_grammarParser::SIZE, 0);
}

gsc_iw_grammarParser::Expr_objectContext* gsc_iw_grammarParser::Expr_sizeContext::expr_object() {
  return getRuleContext<gsc_iw_grammarParser::Expr_objectContext>(0);
}

gsc_iw_grammarParser::Expr_stringContext* gsc_iw_grammarParser::Expr_sizeContext::expr_string() {
  return getRuleContext<gsc_iw_grammarParser::Expr_stringContext>(0);
}


size_t gsc_iw_grammarParser::Expr_sizeContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_size;
}

void gsc_iw_grammarParser::Expr_sizeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_size(this);
}

void gsc_iw_grammarParser::Expr_sizeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_size(this);
}

gsc_iw_grammarParser::Expr_sizeContext* gsc_iw_grammarParser::expr_size() {
  Expr_sizeContext *_localctx = _tracker.createInstance<Expr_sizeContext>(_ctx, getState());
  enterRule(_localctx, 154, gsc_iw_grammarParser::RuleExpr_size);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(878);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case gsc_iw_grammarParser::THREAD:
      case gsc_iw_grammarParser::CHILDTHREAD:
      case gsc_iw_grammarParser::CALL:
      case gsc_iw_grammarParser::SIZE:
      case gsc_iw_grammarParser::GAME:
      case gsc_iw_grammarParser::SELF:
      case gsc_iw_grammarParser::ANIM:
      case gsc_iw_grammarParser::LEVEL:
      case gsc_iw_grammarParser::LBRACKET:
      case gsc_iw_grammarParser::IDENTIFIER:
      case gsc_iw_grammarParser::PATH: {
        setState(876);
        expr_object();
        break;
      }

      case gsc_iw_grammarParser::STRING: {
        setState(877);
        expr_string();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(880);
    match(gsc_iw_grammarParser::DOT);
    setState(881);
    match(gsc_iw_grammarParser::SIZE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_thisthreadContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_thisthreadContext::Expr_thisthreadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_thisthreadContext::THISTHREAD() {
  return getToken(gsc_iw_grammarParser::THISTHREAD, 0);
}


size_t gsc_iw_grammarParser::Expr_thisthreadContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_thisthread;
}

void gsc_iw_grammarParser::Expr_thisthreadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_thisthread(this);
}

void gsc_iw_grammarParser::Expr_thisthreadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_thisthread(this);
}

gsc_iw_grammarParser::Expr_thisthreadContext* gsc_iw_grammarParser::expr_thisthread() {
  Expr_thisthreadContext *_localctx = _tracker.createInstance<Expr_thisthreadContext>(_ctx, getState());
  enterRule(_localctx, 156, gsc_iw_grammarParser::RuleExpr_thisthread);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(883);
    match(gsc_iw_grammarParser::THISTHREAD);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_empty_arrayContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_empty_arrayContext::Expr_empty_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_empty_arrayContext::LBRACKET() {
  return getToken(gsc_iw_grammarParser::LBRACKET, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_empty_arrayContext::RBRACKET() {
  return getToken(gsc_iw_grammarParser::RBRACKET, 0);
}


size_t gsc_iw_grammarParser::Expr_empty_arrayContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_empty_array;
}

void gsc_iw_grammarParser::Expr_empty_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_empty_array(this);
}

void gsc_iw_grammarParser::Expr_empty_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_empty_array(this);
}

gsc_iw_grammarParser::Expr_empty_arrayContext* gsc_iw_grammarParser::expr_empty_array() {
  Expr_empty_arrayContext *_localctx = _tracker.createInstance<Expr_empty_arrayContext>(_ctx, getState());
  enterRule(_localctx, 158, gsc_iw_grammarParser::RuleExpr_empty_array);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(885);
    match(gsc_iw_grammarParser::LBRACKET);
    setState(886);
    match(gsc_iw_grammarParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_undefinedContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_undefinedContext::Expr_undefinedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_undefinedContext::UNDEFINED() {
  return getToken(gsc_iw_grammarParser::UNDEFINED, 0);
}


size_t gsc_iw_grammarParser::Expr_undefinedContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_undefined;
}

void gsc_iw_grammarParser::Expr_undefinedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_undefined(this);
}

void gsc_iw_grammarParser::Expr_undefinedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_undefined(this);
}

gsc_iw_grammarParser::Expr_undefinedContext* gsc_iw_grammarParser::expr_undefined() {
  Expr_undefinedContext *_localctx = _tracker.createInstance<Expr_undefinedContext>(_ctx, getState());
  enterRule(_localctx, 160, gsc_iw_grammarParser::RuleExpr_undefined);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(888);
    match(gsc_iw_grammarParser::UNDEFINED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_gameContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_gameContext::Expr_gameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_gameContext::GAME() {
  return getToken(gsc_iw_grammarParser::GAME, 0);
}


size_t gsc_iw_grammarParser::Expr_gameContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_game;
}

void gsc_iw_grammarParser::Expr_gameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_game(this);
}

void gsc_iw_grammarParser::Expr_gameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_game(this);
}

gsc_iw_grammarParser::Expr_gameContext* gsc_iw_grammarParser::expr_game() {
  Expr_gameContext *_localctx = _tracker.createInstance<Expr_gameContext>(_ctx, getState());
  enterRule(_localctx, 162, gsc_iw_grammarParser::RuleExpr_game);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(890);
    match(gsc_iw_grammarParser::GAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_selfContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_selfContext::Expr_selfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_selfContext::SELF() {
  return getToken(gsc_iw_grammarParser::SELF, 0);
}


size_t gsc_iw_grammarParser::Expr_selfContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_self;
}

void gsc_iw_grammarParser::Expr_selfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_self(this);
}

void gsc_iw_grammarParser::Expr_selfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_self(this);
}

gsc_iw_grammarParser::Expr_selfContext* gsc_iw_grammarParser::expr_self() {
  Expr_selfContext *_localctx = _tracker.createInstance<Expr_selfContext>(_ctx, getState());
  enterRule(_localctx, 164, gsc_iw_grammarParser::RuleExpr_self);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(892);
    match(gsc_iw_grammarParser::SELF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_animContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_animContext::Expr_animContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_animContext::ANIM() {
  return getToken(gsc_iw_grammarParser::ANIM, 0);
}


size_t gsc_iw_grammarParser::Expr_animContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_anim;
}

void gsc_iw_grammarParser::Expr_animContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_anim(this);
}

void gsc_iw_grammarParser::Expr_animContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_anim(this);
}

gsc_iw_grammarParser::Expr_animContext* gsc_iw_grammarParser::expr_anim() {
  Expr_animContext *_localctx = _tracker.createInstance<Expr_animContext>(_ctx, getState());
  enterRule(_localctx, 166, gsc_iw_grammarParser::RuleExpr_anim);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(894);
    match(gsc_iw_grammarParser::ANIM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_levelContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_levelContext::Expr_levelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_levelContext::LEVEL() {
  return getToken(gsc_iw_grammarParser::LEVEL, 0);
}


size_t gsc_iw_grammarParser::Expr_levelContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_level;
}

void gsc_iw_grammarParser::Expr_levelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_level(this);
}

void gsc_iw_grammarParser::Expr_levelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_level(this);
}

gsc_iw_grammarParser::Expr_levelContext* gsc_iw_grammarParser::expr_level() {
  Expr_levelContext *_localctx = _tracker.createInstance<Expr_levelContext>(_ctx, getState());
  enterRule(_localctx, 168, gsc_iw_grammarParser::RuleExpr_level);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(896);
    match(gsc_iw_grammarParser::LEVEL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_animtreeContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_animtreeContext::Expr_animtreeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_animtreeContext::ANIMTREE() {
  return getToken(gsc_iw_grammarParser::ANIMTREE, 0);
}


size_t gsc_iw_grammarParser::Expr_animtreeContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_animtree;
}

void gsc_iw_grammarParser::Expr_animtreeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_animtree(this);
}

void gsc_iw_grammarParser::Expr_animtreeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_animtree(this);
}

gsc_iw_grammarParser::Expr_animtreeContext* gsc_iw_grammarParser::expr_animtree() {
  Expr_animtreeContext *_localctx = _tracker.createInstance<Expr_animtreeContext>(_ctx, getState());
  enterRule(_localctx, 170, gsc_iw_grammarParser::RuleExpr_animtree);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(898);
    match(gsc_iw_grammarParser::ANIMTREE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_vectorContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_vectorContext::Expr_vectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_vectorContext::LPAREN() {
  return getToken(gsc_iw_grammarParser::LPAREN, 0);
}

std::vector<gsc_iw_grammarParser::ExprContext *> gsc_iw_grammarParser::Expr_vectorContext::expr() {
  return getRuleContexts<gsc_iw_grammarParser::ExprContext>();
}

gsc_iw_grammarParser::ExprContext* gsc_iw_grammarParser::Expr_vectorContext::expr(size_t i) {
  return getRuleContext<gsc_iw_grammarParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> gsc_iw_grammarParser::Expr_vectorContext::COMMA() {
  return getTokens(gsc_iw_grammarParser::COMMA);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_vectorContext::COMMA(size_t i) {
  return getToken(gsc_iw_grammarParser::COMMA, i);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_vectorContext::RPAREN() {
  return getToken(gsc_iw_grammarParser::RPAREN, 0);
}


size_t gsc_iw_grammarParser::Expr_vectorContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_vector;
}

void gsc_iw_grammarParser::Expr_vectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_vector(this);
}

void gsc_iw_grammarParser::Expr_vectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_vector(this);
}

gsc_iw_grammarParser::Expr_vectorContext* gsc_iw_grammarParser::expr_vector() {
  Expr_vectorContext *_localctx = _tracker.createInstance<Expr_vectorContext>(_ctx, getState());
  enterRule(_localctx, 172, gsc_iw_grammarParser::RuleExpr_vector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(900);
    match(gsc_iw_grammarParser::LPAREN);
    setState(901);
    expr();
    setState(902);
    match(gsc_iw_grammarParser::COMMA);
    setState(903);
    expr();
    setState(904);
    match(gsc_iw_grammarParser::COMMA);
    setState(905);
    expr();
    setState(906);
    match(gsc_iw_grammarParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_pathContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_pathContext::Expr_pathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_pathContext::PATH() {
  return getToken(gsc_iw_grammarParser::PATH, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_pathContext::IDENTIFIER() {
  return getToken(gsc_iw_grammarParser::IDENTIFIER, 0);
}


size_t gsc_iw_grammarParser::Expr_pathContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_path;
}

void gsc_iw_grammarParser::Expr_pathContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_path(this);
}

void gsc_iw_grammarParser::Expr_pathContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_path(this);
}

gsc_iw_grammarParser::Expr_pathContext* gsc_iw_grammarParser::expr_path() {
  Expr_pathContext *_localctx = _tracker.createInstance<Expr_pathContext>(_ctx, getState());
  enterRule(_localctx, 174, gsc_iw_grammarParser::RuleExpr_path);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(908);
    _la = _input->LA(1);
    if (!(_la == gsc_iw_grammarParser::IDENTIFIER

    || _la == gsc_iw_grammarParser::PATH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_identifier_fieldContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_identifier_fieldContext::Expr_identifier_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_identifier_fieldContext::IDENTIFIER() {
  return getToken(gsc_iw_grammarParser::IDENTIFIER, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_identifier_fieldContext::WAIT() {
  return getToken(gsc_iw_grammarParser::WAIT, 0);
}


size_t gsc_iw_grammarParser::Expr_identifier_fieldContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_identifier_field;
}

void gsc_iw_grammarParser::Expr_identifier_fieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_identifier_field(this);
}

void gsc_iw_grammarParser::Expr_identifier_fieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_identifier_field(this);
}

gsc_iw_grammarParser::Expr_identifier_fieldContext* gsc_iw_grammarParser::expr_identifier_field() {
  Expr_identifier_fieldContext *_localctx = _tracker.createInstance<Expr_identifier_fieldContext>(_ctx, getState());
  enterRule(_localctx, 176, gsc_iw_grammarParser::RuleExpr_identifier_field);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(910);
    _la = _input->LA(1);
    if (!(_la == gsc_iw_grammarParser::WAIT || _la == gsc_iw_grammarParser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_identifierContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_identifierContext::Expr_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_identifierContext::IDENTIFIER() {
  return getToken(gsc_iw_grammarParser::IDENTIFIER, 0);
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_identifierContext::SIZE() {
  return getToken(gsc_iw_grammarParser::SIZE, 0);
}


size_t gsc_iw_grammarParser::Expr_identifierContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_identifier;
}

void gsc_iw_grammarParser::Expr_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_identifier(this);
}

void gsc_iw_grammarParser::Expr_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_identifier(this);
}

gsc_iw_grammarParser::Expr_identifierContext* gsc_iw_grammarParser::expr_identifier() {
  Expr_identifierContext *_localctx = _tracker.createInstance<Expr_identifierContext>(_ctx, getState());
  enterRule(_localctx, 178, gsc_iw_grammarParser::RuleExpr_identifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(912);
    _la = _input->LA(1);
    if (!(_la == gsc_iw_grammarParser::SIZE

    || _la == gsc_iw_grammarParser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_istringContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_istringContext::Expr_istringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_istringContext::ISTRING() {
  return getToken(gsc_iw_grammarParser::ISTRING, 0);
}


size_t gsc_iw_grammarParser::Expr_istringContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_istring;
}

void gsc_iw_grammarParser::Expr_istringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_istring(this);
}

void gsc_iw_grammarParser::Expr_istringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_istring(this);
}

gsc_iw_grammarParser::Expr_istringContext* gsc_iw_grammarParser::expr_istring() {
  Expr_istringContext *_localctx = _tracker.createInstance<Expr_istringContext>(_ctx, getState());
  enterRule(_localctx, 180, gsc_iw_grammarParser::RuleExpr_istring);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(914);
    match(gsc_iw_grammarParser::ISTRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_stringContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_stringContext::Expr_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_stringContext::STRING() {
  return getToken(gsc_iw_grammarParser::STRING, 0);
}


size_t gsc_iw_grammarParser::Expr_stringContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_string;
}

void gsc_iw_grammarParser::Expr_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_string(this);
}

void gsc_iw_grammarParser::Expr_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_string(this);
}

gsc_iw_grammarParser::Expr_stringContext* gsc_iw_grammarParser::expr_string() {
  Expr_stringContext *_localctx = _tracker.createInstance<Expr_stringContext>(_ctx, getState());
  enterRule(_localctx, 182, gsc_iw_grammarParser::RuleExpr_string);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(916);
    match(gsc_iw_grammarParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_floatContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_floatContext::Expr_floatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_floatContext::FLOAT() {
  return getToken(gsc_iw_grammarParser::FLOAT, 0);
}


size_t gsc_iw_grammarParser::Expr_floatContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_float;
}

void gsc_iw_grammarParser::Expr_floatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_float(this);
}

void gsc_iw_grammarParser::Expr_floatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_float(this);
}

gsc_iw_grammarParser::Expr_floatContext* gsc_iw_grammarParser::expr_float() {
  Expr_floatContext *_localctx = _tracker.createInstance<Expr_floatContext>(_ctx, getState());
  enterRule(_localctx, 184, gsc_iw_grammarParser::RuleExpr_float);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(918);
    match(gsc_iw_grammarParser::FLOAT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_integerContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_integerContext::Expr_integerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_integerContext::INTEGER() {
  return getToken(gsc_iw_grammarParser::INTEGER, 0);
}


size_t gsc_iw_grammarParser::Expr_integerContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_integer;
}

void gsc_iw_grammarParser::Expr_integerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_integer(this);
}

void gsc_iw_grammarParser::Expr_integerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_integer(this);
}

gsc_iw_grammarParser::Expr_integerContext* gsc_iw_grammarParser::expr_integer() {
  Expr_integerContext *_localctx = _tracker.createInstance<Expr_integerContext>(_ctx, getState());
  enterRule(_localctx, 186, gsc_iw_grammarParser::RuleExpr_integer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(920);
    match(gsc_iw_grammarParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_falseContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_falseContext::Expr_falseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_falseContext::FALSE() {
  return getToken(gsc_iw_grammarParser::FALSE, 0);
}


size_t gsc_iw_grammarParser::Expr_falseContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_false;
}

void gsc_iw_grammarParser::Expr_falseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_false(this);
}

void gsc_iw_grammarParser::Expr_falseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_false(this);
}

gsc_iw_grammarParser::Expr_falseContext* gsc_iw_grammarParser::expr_false() {
  Expr_falseContext *_localctx = _tracker.createInstance<Expr_falseContext>(_ctx, getState());
  enterRule(_localctx, 188, gsc_iw_grammarParser::RuleExpr_false);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(922);
    match(gsc_iw_grammarParser::FALSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_trueContext ------------------------------------------------------------------

gsc_iw_grammarParser::Expr_trueContext::Expr_trueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* gsc_iw_grammarParser::Expr_trueContext::TRUE() {
  return getToken(gsc_iw_grammarParser::TRUE, 0);
}


size_t gsc_iw_grammarParser::Expr_trueContext::getRuleIndex() const {
  return gsc_iw_grammarParser::RuleExpr_true;
}

void gsc_iw_grammarParser::Expr_trueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_true(this);
}

void gsc_iw_grammarParser::Expr_trueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<gsc_iw_grammarListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_true(this);
}

gsc_iw_grammarParser::Expr_trueContext* gsc_iw_grammarParser::expr_true() {
  Expr_trueContext *_localctx = _tracker.createInstance<Expr_trueContext>(_ctx, getState());
  enterRule(_localctx, 190, gsc_iw_grammarParser::RuleExpr_true);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(924);
    match(gsc_iw_grammarParser::TRUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void gsc_iw_grammarParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gsc_iw_grammarParserInitialize();
#else
  ::antlr4::internal::call_once(gsc_iw_grammarParserOnceFlag, gsc_iw_grammarParserInitialize);
#endif
}
