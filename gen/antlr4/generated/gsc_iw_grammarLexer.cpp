
// Generated from gsc_iw_grammar.g4 by ANTLR 4.13.2


#include "gsc_iw_grammarLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct Gsc_iw_grammarLexerStaticData final {
  Gsc_iw_grammarLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Gsc_iw_grammarLexerStaticData(const Gsc_iw_grammarLexerStaticData&) = delete;
  Gsc_iw_grammarLexerStaticData(Gsc_iw_grammarLexerStaticData&&) = delete;
  Gsc_iw_grammarLexerStaticData& operator=(const Gsc_iw_grammarLexerStaticData&) = delete;
  Gsc_iw_grammarLexerStaticData& operator=(Gsc_iw_grammarLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gsc_iw_grammarlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<Gsc_iw_grammarLexerStaticData> gsc_iw_grammarlexerLexerStaticData = nullptr;

void gsc_iw_grammarlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gsc_iw_grammarlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(gsc_iw_grammarlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Gsc_iw_grammarLexerStaticData>(
    std::vector<std::string>{
      "HASH", "DEVBEGIN", "DEVEND", "INLINE", "INCLUDE", "USINGTREE", "ANIMTREE", 
      "ENDON", "NOTIFY", "WAIT", "WAITTILL", "WAITTILLMATCH", "WAITTILLFRAMEEND", 
      "WAITFRAME", "IF", "ELSE", "DO", "WHILE", "FOR", "FOREACH", "IN", 
      "SWITCH", "CASE", "DEFAULT", "BREAK", "CONTINUE", "RETURN", "BREAKPOINT", 
      "PROFBEGIN", "PROFEND", "ASSERT", "ASSERTEX", "ASSERTMSG", "THREAD", 
      "CHILDTHREAD", "THISTHREAD", "CALL", "TRUE", "FALSE", "UNDEFINED", 
      "SIZE", "GAME", "SELF", "ANIM", "LEVEL", "ISDEFINED", "ISTRUE", "LPAREN", 
      "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", "DOT", 
      "DOUBLEDOT", "ELLIPSIS", "DOUBLECOLON", "COLON", "SEMICOLON", "QMARK", 
      "INCREMENT", "DECREMENT", "LSHIFT", "RSHIFT", "OR", "AND", "EQUALITY", 
      "INEQUALITY", "LESS_EQUAL", "GREATER_EQUAL", "LESS", "GREATER", "NOT", 
      "COMPLEMENT", "ASSIGN", "AMUL", "ADIV", "AMOD", "AADD", "ASUB", "ARSH", 
      "ALSH", "ABWOR", "ABWXOR", "ABWAND", "BW_OR", "BW_XOR", "BW_AND", 
      "ADD", "SUB", "MUL", "DIV", "MOD", "FLOAT", "INTEGER", "STRING", "ISTRING", 
      "HSTRING", "IDENTIFIER", "PATH", "WHITESPACE", "LINE_COMMENT", "BLOCK_COMMENT", 
      "GSCDOC_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'#'", "'/#'", "'#/'", "'#inline'", "'#include'", "'#using_animtree'", 
      "'#animtree'", "'endon'", "'notify'", "'wait'", "'waittill'", "'waittillmatch'", 
      "'waittillframeend'", "'waitframe'", "'if'", "'else'", "'do'", "'while'", 
      "'for'", "'foreach'", "'in'", "'switch'", "'case'", "'default'", "'break'", 
      "'continue'", "'return'", "'breakpoint'", "'prof_begin'", "'prof_end'", 
      "'assert'", "'assertex'", "'assertmsg'", "'thread'", "'childthread'", 
      "'thisthread'", "'call'", "'true'", "'false'", "'undefined'", "'size'", 
      "'game'", "'self'", "'anim'", "'level'", "'isdefined'", "'istrue'", 
      "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'.'", "'..'", "'...'", 
      "'::'", "':'", "';'", "'\\u003F'", "'++'", "'--'", "'<<'", "'>>'", 
      "'||'", "'&&'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", "'!'", 
      "'~'", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'>>='", "'<<='", 
      "'|='", "'^='", "'&='", "'|'", "'^'", "'&'", "'+'", "'-'", "'*'", 
      "'/'", "'%'"
    },
    std::vector<std::string>{
      "", "HASH", "DEVBEGIN", "DEVEND", "INLINE", "INCLUDE", "USINGTREE", 
      "ANIMTREE", "ENDON", "NOTIFY", "WAIT", "WAITTILL", "WAITTILLMATCH", 
      "WAITTILLFRAMEEND", "WAITFRAME", "IF", "ELSE", "DO", "WHILE", "FOR", 
      "FOREACH", "IN", "SWITCH", "CASE", "DEFAULT", "BREAK", "CONTINUE", 
      "RETURN", "BREAKPOINT", "PROFBEGIN", "PROFEND", "ASSERT", "ASSERTEX", 
      "ASSERTMSG", "THREAD", "CHILDTHREAD", "THISTHREAD", "CALL", "TRUE", 
      "FALSE", "UNDEFINED", "SIZE", "GAME", "SELF", "ANIM", "LEVEL", "ISDEFINED", 
      "ISTRUE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
      "COMMA", "DOT", "DOUBLEDOT", "ELLIPSIS", "DOUBLECOLON", "COLON", "SEMICOLON", 
      "QMARK", "INCREMENT", "DECREMENT", "LSHIFT", "RSHIFT", "OR", "AND", 
      "EQUALITY", "INEQUALITY", "LESS_EQUAL", "GREATER_EQUAL", "LESS", "GREATER", 
      "NOT", "COMPLEMENT", "ASSIGN", "AMUL", "ADIV", "AMOD", "AADD", "ASUB", 
      "ARSH", "ALSH", "ABWOR", "ABWXOR", "ABWAND", "BW_OR", "BW_XOR", "BW_AND", 
      "ADD", "SUB", "MUL", "DIV", "MOD", "FLOAT", "INTEGER", "STRING", "ISTRING", 
      "HSTRING", "IDENTIFIER", "PATH", "WHITESPACE", "LINE_COMMENT", "BLOCK_COMMENT", 
      "GSCDOC_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,105,797,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
  	7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,
  	14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,
  	21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,
  	28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,
  	35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,
  	42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
  	49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
  	56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,
  	63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
  	70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,
  	77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,
  	84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
  	91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
  	98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
  	1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
  	9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
  	13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
  	15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,
  	18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,
  	21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
  	40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,
  	42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,
  	45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,
  	46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,
  	53,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,
  	58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,
  	64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,
  	68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,
  	74,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,
  	79,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,1,83,1,
  	83,1,84,1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,
  	89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,94,4,94,682,8,94,11,94,12,
  	94,683,1,94,1,94,5,94,688,8,94,10,94,12,94,691,9,94,1,94,3,94,694,8,94,
  	1,95,4,95,697,8,95,11,95,12,95,698,1,96,1,96,1,96,1,96,5,96,705,8,96,
  	10,96,12,96,708,9,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,5,97,718,
  	8,97,10,97,12,97,721,9,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,5,98,
  	731,8,98,10,98,12,98,734,9,98,1,98,1,98,1,99,1,99,5,99,740,8,99,10,99,
  	12,99,743,9,99,1,100,1,100,1,100,4,100,748,8,100,11,100,12,100,749,1,
  	101,4,101,753,8,101,11,101,12,101,754,1,101,1,101,1,102,1,102,1,102,1,
  	102,5,102,763,8,102,10,102,12,102,766,9,102,1,102,1,102,1,103,1,103,1,
  	103,1,103,5,103,774,8,103,10,103,12,103,777,9,103,1,103,1,103,1,103,1,
  	103,1,103,1,104,1,104,1,104,1,104,5,104,788,8,104,10,104,12,104,791,9,
  	104,1,104,1,104,1,104,1,104,1,104,2,775,789,0,105,1,1,3,2,5,3,7,4,9,5,
  	11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
  	18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
  	59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
  	41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,
  	105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,
  	125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,
  	145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,
  	165,83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,183,92,
  	185,93,187,94,189,95,191,96,193,97,195,98,197,99,199,100,201,101,203,
  	102,205,103,207,104,209,105,1,0,6,1,0,48,57,2,0,34,34,92,92,3,0,65,90,
  	95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,2,0,10,
  	10,13,13,812,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
  	0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
  	0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
  	1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
  	0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
  	0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
  	1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
  	0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
  	0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
  	1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
  	0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
  	0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
  	0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
  	0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,
  	0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,
  	0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,
  	0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,
  	0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,
  	0,0,0,0,187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,
  	0,0,0,0,197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,
  	0,0,0,0,207,1,0,0,0,0,209,1,0,0,0,1,211,1,0,0,0,3,213,1,0,0,0,5,216,1,
  	0,0,0,7,219,1,0,0,0,9,227,1,0,0,0,11,236,1,0,0,0,13,252,1,0,0,0,15,262,
  	1,0,0,0,17,268,1,0,0,0,19,275,1,0,0,0,21,280,1,0,0,0,23,289,1,0,0,0,25,
  	303,1,0,0,0,27,320,1,0,0,0,29,330,1,0,0,0,31,333,1,0,0,0,33,338,1,0,0,
  	0,35,341,1,0,0,0,37,347,1,0,0,0,39,351,1,0,0,0,41,359,1,0,0,0,43,362,
  	1,0,0,0,45,369,1,0,0,0,47,374,1,0,0,0,49,382,1,0,0,0,51,388,1,0,0,0,53,
  	397,1,0,0,0,55,404,1,0,0,0,57,415,1,0,0,0,59,426,1,0,0,0,61,435,1,0,0,
  	0,63,442,1,0,0,0,65,451,1,0,0,0,67,461,1,0,0,0,69,468,1,0,0,0,71,480,
  	1,0,0,0,73,491,1,0,0,0,75,496,1,0,0,0,77,501,1,0,0,0,79,507,1,0,0,0,81,
  	517,1,0,0,0,83,522,1,0,0,0,85,527,1,0,0,0,87,532,1,0,0,0,89,537,1,0,0,
  	0,91,543,1,0,0,0,93,553,1,0,0,0,95,560,1,0,0,0,97,562,1,0,0,0,99,564,
  	1,0,0,0,101,566,1,0,0,0,103,568,1,0,0,0,105,570,1,0,0,0,107,572,1,0,0,
  	0,109,574,1,0,0,0,111,576,1,0,0,0,113,579,1,0,0,0,115,583,1,0,0,0,117,
  	586,1,0,0,0,119,588,1,0,0,0,121,590,1,0,0,0,123,592,1,0,0,0,125,595,1,
  	0,0,0,127,598,1,0,0,0,129,601,1,0,0,0,131,604,1,0,0,0,133,607,1,0,0,0,
  	135,610,1,0,0,0,137,613,1,0,0,0,139,616,1,0,0,0,141,619,1,0,0,0,143,622,
  	1,0,0,0,145,624,1,0,0,0,147,626,1,0,0,0,149,628,1,0,0,0,151,630,1,0,0,
  	0,153,632,1,0,0,0,155,635,1,0,0,0,157,638,1,0,0,0,159,641,1,0,0,0,161,
  	644,1,0,0,0,163,647,1,0,0,0,165,651,1,0,0,0,167,655,1,0,0,0,169,658,1,
  	0,0,0,171,661,1,0,0,0,173,664,1,0,0,0,175,666,1,0,0,0,177,668,1,0,0,0,
  	179,670,1,0,0,0,181,672,1,0,0,0,183,674,1,0,0,0,185,676,1,0,0,0,187,678,
  	1,0,0,0,189,681,1,0,0,0,191,696,1,0,0,0,193,700,1,0,0,0,195,711,1,0,0,
  	0,197,724,1,0,0,0,199,737,1,0,0,0,201,744,1,0,0,0,203,752,1,0,0,0,205,
  	758,1,0,0,0,207,769,1,0,0,0,209,783,1,0,0,0,211,212,5,35,0,0,212,2,1,
  	0,0,0,213,214,5,47,0,0,214,215,5,35,0,0,215,4,1,0,0,0,216,217,5,35,0,
  	0,217,218,5,47,0,0,218,6,1,0,0,0,219,220,5,35,0,0,220,221,5,105,0,0,221,
  	222,5,110,0,0,222,223,5,108,0,0,223,224,5,105,0,0,224,225,5,110,0,0,225,
  	226,5,101,0,0,226,8,1,0,0,0,227,228,5,35,0,0,228,229,5,105,0,0,229,230,
  	5,110,0,0,230,231,5,99,0,0,231,232,5,108,0,0,232,233,5,117,0,0,233,234,
  	5,100,0,0,234,235,5,101,0,0,235,10,1,0,0,0,236,237,5,35,0,0,237,238,5,
  	117,0,0,238,239,5,115,0,0,239,240,5,105,0,0,240,241,5,110,0,0,241,242,
  	5,103,0,0,242,243,5,95,0,0,243,244,5,97,0,0,244,245,5,110,0,0,245,246,
  	5,105,0,0,246,247,5,109,0,0,247,248,5,116,0,0,248,249,5,114,0,0,249,250,
  	5,101,0,0,250,251,5,101,0,0,251,12,1,0,0,0,252,253,5,35,0,0,253,254,5,
  	97,0,0,254,255,5,110,0,0,255,256,5,105,0,0,256,257,5,109,0,0,257,258,
  	5,116,0,0,258,259,5,114,0,0,259,260,5,101,0,0,260,261,5,101,0,0,261,14,
  	1,0,0,0,262,263,5,101,0,0,263,264,5,110,0,0,264,265,5,100,0,0,265,266,
  	5,111,0,0,266,267,5,110,0,0,267,16,1,0,0,0,268,269,5,110,0,0,269,270,
  	5,111,0,0,270,271,5,116,0,0,271,272,5,105,0,0,272,273,5,102,0,0,273,274,
  	5,121,0,0,274,18,1,0,0,0,275,276,5,119,0,0,276,277,5,97,0,0,277,278,5,
  	105,0,0,278,279,5,116,0,0,279,20,1,0,0,0,280,281,5,119,0,0,281,282,5,
  	97,0,0,282,283,5,105,0,0,283,284,5,116,0,0,284,285,5,116,0,0,285,286,
  	5,105,0,0,286,287,5,108,0,0,287,288,5,108,0,0,288,22,1,0,0,0,289,290,
  	5,119,0,0,290,291,5,97,0,0,291,292,5,105,0,0,292,293,5,116,0,0,293,294,
  	5,116,0,0,294,295,5,105,0,0,295,296,5,108,0,0,296,297,5,108,0,0,297,298,
  	5,109,0,0,298,299,5,97,0,0,299,300,5,116,0,0,300,301,5,99,0,0,301,302,
  	5,104,0,0,302,24,1,0,0,0,303,304,5,119,0,0,304,305,5,97,0,0,305,306,5,
  	105,0,0,306,307,5,116,0,0,307,308,5,116,0,0,308,309,5,105,0,0,309,310,
  	5,108,0,0,310,311,5,108,0,0,311,312,5,102,0,0,312,313,5,114,0,0,313,314,
  	5,97,0,0,314,315,5,109,0,0,315,316,5,101,0,0,316,317,5,101,0,0,317,318,
  	5,110,0,0,318,319,5,100,0,0,319,26,1,0,0,0,320,321,5,119,0,0,321,322,
  	5,97,0,0,322,323,5,105,0,0,323,324,5,116,0,0,324,325,5,102,0,0,325,326,
  	5,114,0,0,326,327,5,97,0,0,327,328,5,109,0,0,328,329,5,101,0,0,329,28,
  	1,0,0,0,330,331,5,105,0,0,331,332,5,102,0,0,332,30,1,0,0,0,333,334,5,
  	101,0,0,334,335,5,108,0,0,335,336,5,115,0,0,336,337,5,101,0,0,337,32,
  	1,0,0,0,338,339,5,100,0,0,339,340,5,111,0,0,340,34,1,0,0,0,341,342,5,
  	119,0,0,342,343,5,104,0,0,343,344,5,105,0,0,344,345,5,108,0,0,345,346,
  	5,101,0,0,346,36,1,0,0,0,347,348,5,102,0,0,348,349,5,111,0,0,349,350,
  	5,114,0,0,350,38,1,0,0,0,351,352,5,102,0,0,352,353,5,111,0,0,353,354,
  	5,114,0,0,354,355,5,101,0,0,355,356,5,97,0,0,356,357,5,99,0,0,357,358,
  	5,104,0,0,358,40,1,0,0,0,359,360,5,105,0,0,360,361,5,110,0,0,361,42,1,
  	0,0,0,362,363,5,115,0,0,363,364,5,119,0,0,364,365,5,105,0,0,365,366,5,
  	116,0,0,366,367,5,99,0,0,367,368,5,104,0,0,368,44,1,0,0,0,369,370,5,99,
  	0,0,370,371,5,97,0,0,371,372,5,115,0,0,372,373,5,101,0,0,373,46,1,0,0,
  	0,374,375,5,100,0,0,375,376,5,101,0,0,376,377,5,102,0,0,377,378,5,97,
  	0,0,378,379,5,117,0,0,379,380,5,108,0,0,380,381,5,116,0,0,381,48,1,0,
  	0,0,382,383,5,98,0,0,383,384,5,114,0,0,384,385,5,101,0,0,385,386,5,97,
  	0,0,386,387,5,107,0,0,387,50,1,0,0,0,388,389,5,99,0,0,389,390,5,111,0,
  	0,390,391,5,110,0,0,391,392,5,116,0,0,392,393,5,105,0,0,393,394,5,110,
  	0,0,394,395,5,117,0,0,395,396,5,101,0,0,396,52,1,0,0,0,397,398,5,114,
  	0,0,398,399,5,101,0,0,399,400,5,116,0,0,400,401,5,117,0,0,401,402,5,114,
  	0,0,402,403,5,110,0,0,403,54,1,0,0,0,404,405,5,98,0,0,405,406,5,114,0,
  	0,406,407,5,101,0,0,407,408,5,97,0,0,408,409,5,107,0,0,409,410,5,112,
  	0,0,410,411,5,111,0,0,411,412,5,105,0,0,412,413,5,110,0,0,413,414,5,116,
  	0,0,414,56,1,0,0,0,415,416,5,112,0,0,416,417,5,114,0,0,417,418,5,111,
  	0,0,418,419,5,102,0,0,419,420,5,95,0,0,420,421,5,98,0,0,421,422,5,101,
  	0,0,422,423,5,103,0,0,423,424,5,105,0,0,424,425,5,110,0,0,425,58,1,0,
  	0,0,426,427,5,112,0,0,427,428,5,114,0,0,428,429,5,111,0,0,429,430,5,102,
  	0,0,430,431,5,95,0,0,431,432,5,101,0,0,432,433,5,110,0,0,433,434,5,100,
  	0,0,434,60,1,0,0,0,435,436,5,97,0,0,436,437,5,115,0,0,437,438,5,115,0,
  	0,438,439,5,101,0,0,439,440,5,114,0,0,440,441,5,116,0,0,441,62,1,0,0,
  	0,442,443,5,97,0,0,443,444,5,115,0,0,444,445,5,115,0,0,445,446,5,101,
  	0,0,446,447,5,114,0,0,447,448,5,116,0,0,448,449,5,101,0,0,449,450,5,120,
  	0,0,450,64,1,0,0,0,451,452,5,97,0,0,452,453,5,115,0,0,453,454,5,115,0,
  	0,454,455,5,101,0,0,455,456,5,114,0,0,456,457,5,116,0,0,457,458,5,109,
  	0,0,458,459,5,115,0,0,459,460,5,103,0,0,460,66,1,0,0,0,461,462,5,116,
  	0,0,462,463,5,104,0,0,463,464,5,114,0,0,464,465,5,101,0,0,465,466,5,97,
  	0,0,466,467,5,100,0,0,467,68,1,0,0,0,468,469,5,99,0,0,469,470,5,104,0,
  	0,470,471,5,105,0,0,471,472,5,108,0,0,472,473,5,100,0,0,473,474,5,116,
  	0,0,474,475,5,104,0,0,475,476,5,114,0,0,476,477,5,101,0,0,477,478,5,97,
  	0,0,478,479,5,100,0,0,479,70,1,0,0,0,480,481,5,116,0,0,481,482,5,104,
  	0,0,482,483,5,105,0,0,483,484,5,115,0,0,484,485,5,116,0,0,485,486,5,104,
  	0,0,486,487,5,114,0,0,487,488,5,101,0,0,488,489,5,97,0,0,489,490,5,100,
  	0,0,490,72,1,0,0,0,491,492,5,99,0,0,492,493,5,97,0,0,493,494,5,108,0,
  	0,494,495,5,108,0,0,495,74,1,0,0,0,496,497,5,116,0,0,497,498,5,114,0,
  	0,498,499,5,117,0,0,499,500,5,101,0,0,500,76,1,0,0,0,501,502,5,102,0,
  	0,502,503,5,97,0,0,503,504,5,108,0,0,504,505,5,115,0,0,505,506,5,101,
  	0,0,506,78,1,0,0,0,507,508,5,117,0,0,508,509,5,110,0,0,509,510,5,100,
  	0,0,510,511,5,101,0,0,511,512,5,102,0,0,512,513,5,105,0,0,513,514,5,110,
  	0,0,514,515,5,101,0,0,515,516,5,100,0,0,516,80,1,0,0,0,517,518,5,115,
  	0,0,518,519,5,105,0,0,519,520,5,122,0,0,520,521,5,101,0,0,521,82,1,0,
  	0,0,522,523,5,103,0,0,523,524,5,97,0,0,524,525,5,109,0,0,525,526,5,101,
  	0,0,526,84,1,0,0,0,527,528,5,115,0,0,528,529,5,101,0,0,529,530,5,108,
  	0,0,530,531,5,102,0,0,531,86,1,0,0,0,532,533,5,97,0,0,533,534,5,110,0,
  	0,534,535,5,105,0,0,535,536,5,109,0,0,536,88,1,0,0,0,537,538,5,108,0,
  	0,538,539,5,101,0,0,539,540,5,118,0,0,540,541,5,101,0,0,541,542,5,108,
  	0,0,542,90,1,0,0,0,543,544,5,105,0,0,544,545,5,115,0,0,545,546,5,100,
  	0,0,546,547,5,101,0,0,547,548,5,102,0,0,548,549,5,105,0,0,549,550,5,110,
  	0,0,550,551,5,101,0,0,551,552,5,100,0,0,552,92,1,0,0,0,553,554,5,105,
  	0,0,554,555,5,115,0,0,555,556,5,116,0,0,556,557,5,114,0,0,557,558,5,117,
  	0,0,558,559,5,101,0,0,559,94,1,0,0,0,560,561,5,40,0,0,561,96,1,0,0,0,
  	562,563,5,41,0,0,563,98,1,0,0,0,564,565,5,123,0,0,565,100,1,0,0,0,566,
  	567,5,125,0,0,567,102,1,0,0,0,568,569,5,91,0,0,569,104,1,0,0,0,570,571,
  	5,93,0,0,571,106,1,0,0,0,572,573,5,44,0,0,573,108,1,0,0,0,574,575,5,46,
  	0,0,575,110,1,0,0,0,576,577,5,46,0,0,577,578,5,46,0,0,578,112,1,0,0,0,
  	579,580,5,46,0,0,580,581,5,46,0,0,581,582,5,46,0,0,582,114,1,0,0,0,583,
  	584,5,58,0,0,584,585,5,58,0,0,585,116,1,0,0,0,586,587,5,58,0,0,587,118,
  	1,0,0,0,588,589,5,59,0,0,589,120,1,0,0,0,590,591,5,63,0,0,591,122,1,0,
  	0,0,592,593,5,43,0,0,593,594,5,43,0,0,594,124,1,0,0,0,595,596,5,45,0,
  	0,596,597,5,45,0,0,597,126,1,0,0,0,598,599,5,60,0,0,599,600,5,60,0,0,
  	600,128,1,0,0,0,601,602,5,62,0,0,602,603,5,62,0,0,603,130,1,0,0,0,604,
  	605,5,124,0,0,605,606,5,124,0,0,606,132,1,0,0,0,607,608,5,38,0,0,608,
  	609,5,38,0,0,609,134,1,0,0,0,610,611,5,61,0,0,611,612,5,61,0,0,612,136,
  	1,0,0,0,613,614,5,33,0,0,614,615,5,61,0,0,615,138,1,0,0,0,616,617,5,60,
  	0,0,617,618,5,61,0,0,618,140,1,0,0,0,619,620,5,62,0,0,620,621,5,61,0,
  	0,621,142,1,0,0,0,622,623,5,60,0,0,623,144,1,0,0,0,624,625,5,62,0,0,625,
  	146,1,0,0,0,626,627,5,33,0,0,627,148,1,0,0,0,628,629,5,126,0,0,629,150,
  	1,0,0,0,630,631,5,61,0,0,631,152,1,0,0,0,632,633,5,42,0,0,633,634,5,61,
  	0,0,634,154,1,0,0,0,635,636,5,47,0,0,636,637,5,61,0,0,637,156,1,0,0,0,
  	638,639,5,37,0,0,639,640,5,61,0,0,640,158,1,0,0,0,641,642,5,43,0,0,642,
  	643,5,61,0,0,643,160,1,0,0,0,644,645,5,45,0,0,645,646,5,61,0,0,646,162,
  	1,0,0,0,647,648,5,62,0,0,648,649,5,62,0,0,649,650,5,61,0,0,650,164,1,
  	0,0,0,651,652,5,60,0,0,652,653,5,60,0,0,653,654,5,61,0,0,654,166,1,0,
  	0,0,655,656,5,124,0,0,656,657,5,61,0,0,657,168,1,0,0,0,658,659,5,94,0,
  	0,659,660,5,61,0,0,660,170,1,0,0,0,661,662,5,38,0,0,662,663,5,61,0,0,
  	663,172,1,0,0,0,664,665,5,124,0,0,665,174,1,0,0,0,666,667,5,94,0,0,667,
  	176,1,0,0,0,668,669,5,38,0,0,669,178,1,0,0,0,670,671,5,43,0,0,671,180,
  	1,0,0,0,672,673,5,45,0,0,673,182,1,0,0,0,674,675,5,42,0,0,675,184,1,0,
  	0,0,676,677,5,47,0,0,677,186,1,0,0,0,678,679,5,37,0,0,679,188,1,0,0,0,
  	680,682,7,0,0,0,681,680,1,0,0,0,682,683,1,0,0,0,683,681,1,0,0,0,683,684,
  	1,0,0,0,684,685,1,0,0,0,685,689,5,46,0,0,686,688,7,0,0,0,687,686,1,0,
  	0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,693,1,0,0,0,691,
  	689,1,0,0,0,692,694,5,102,0,0,693,692,1,0,0,0,693,694,1,0,0,0,694,190,
  	1,0,0,0,695,697,7,0,0,0,696,695,1,0,0,0,697,698,1,0,0,0,698,696,1,0,0,
  	0,698,699,1,0,0,0,699,192,1,0,0,0,700,706,5,34,0,0,701,705,8,1,0,0,702,
  	703,5,92,0,0,703,705,9,0,0,0,704,701,1,0,0,0,704,702,1,0,0,0,705,708,
  	1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,709,1,0,0,0,708,706,1,0,0,
  	0,709,710,5,34,0,0,710,194,1,0,0,0,711,712,5,38,0,0,712,713,5,34,0,0,
  	713,719,1,0,0,0,714,718,8,1,0,0,715,716,5,92,0,0,716,718,9,0,0,0,717,
  	714,1,0,0,0,717,715,1,0,0,0,718,721,1,0,0,0,719,717,1,0,0,0,719,720,1,
  	0,0,0,720,722,1,0,0,0,721,719,1,0,0,0,722,723,5,34,0,0,723,196,1,0,0,
  	0,724,725,5,35,0,0,725,726,5,100,0,0,726,732,1,0,0,0,727,731,8,1,0,0,
  	728,729,5,92,0,0,729,731,9,0,0,0,730,727,1,0,0,0,730,728,1,0,0,0,731,
  	734,1,0,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,732,1,
  	0,0,0,735,736,5,34,0,0,736,198,1,0,0,0,737,741,7,2,0,0,738,740,7,3,0,
  	0,739,738,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,1,0,0,0,742,
  	200,1,0,0,0,743,741,1,0,0,0,744,747,3,199,99,0,745,746,5,92,0,0,746,748,
  	3,199,99,0,747,745,1,0,0,0,748,749,1,0,0,0,749,747,1,0,0,0,749,750,1,
  	0,0,0,750,202,1,0,0,0,751,753,7,4,0,0,752,751,1,0,0,0,753,754,1,0,0,0,
  	754,752,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,757,6,101,0,0,757,
  	204,1,0,0,0,758,759,5,47,0,0,759,760,5,47,0,0,760,764,1,0,0,0,761,763,
  	8,5,0,0,762,761,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,765,1,0,0,
  	0,765,767,1,0,0,0,766,764,1,0,0,0,767,768,6,102,0,0,768,206,1,0,0,0,769,
  	770,5,47,0,0,770,771,5,42,0,0,771,775,1,0,0,0,772,774,9,0,0,0,773,772,
  	1,0,0,0,774,777,1,0,0,0,775,776,1,0,0,0,775,773,1,0,0,0,776,778,1,0,0,
  	0,777,775,1,0,0,0,778,779,5,42,0,0,779,780,5,47,0,0,780,781,1,0,0,0,781,
  	782,6,103,0,0,782,208,1,0,0,0,783,784,5,47,0,0,784,785,5,64,0,0,785,789,
  	1,0,0,0,786,788,9,0,0,0,787,786,1,0,0,0,788,791,1,0,0,0,789,790,1,0,0,
  	0,789,787,1,0,0,0,790,792,1,0,0,0,791,789,1,0,0,0,792,793,5,64,0,0,793,
  	794,5,47,0,0,794,795,1,0,0,0,795,796,6,104,0,0,796,210,1,0,0,0,17,0,683,
  	689,693,698,704,706,717,719,730,732,741,749,754,764,775,789,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gsc_iw_grammarlexerLexerStaticData = std::move(staticData);
}

}

gsc_iw_grammarLexer::gsc_iw_grammarLexer(CharStream *input) : Lexer(input) {
  gsc_iw_grammarLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *gsc_iw_grammarlexerLexerStaticData->atn, gsc_iw_grammarlexerLexerStaticData->decisionToDFA, gsc_iw_grammarlexerLexerStaticData->sharedContextCache);
}

gsc_iw_grammarLexer::~gsc_iw_grammarLexer() {
  delete _interpreter;
}

std::string gsc_iw_grammarLexer::getGrammarFileName() const {
  return "gsc_iw_grammar.g4";
}

const std::vector<std::string>& gsc_iw_grammarLexer::getRuleNames() const {
  return gsc_iw_grammarlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& gsc_iw_grammarLexer::getChannelNames() const {
  return gsc_iw_grammarlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& gsc_iw_grammarLexer::getModeNames() const {
  return gsc_iw_grammarlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& gsc_iw_grammarLexer::getVocabulary() const {
  return gsc_iw_grammarlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView gsc_iw_grammarLexer::getSerializedATN() const {
  return gsc_iw_grammarlexerLexerStaticData->serializedATN;
}

const atn::ATN& gsc_iw_grammarLexer::getATN() const {
  return *gsc_iw_grammarlexerLexerStaticData->atn;
}




void gsc_iw_grammarLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gsc_iw_grammarlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(gsc_iw_grammarlexerLexerOnceFlag, gsc_iw_grammarlexerLexerInitialize);
#endif
}
